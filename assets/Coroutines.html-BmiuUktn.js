import{_ as p,c as i,a as s,b as a,d as t,e as o,o as c,r as l}from"./app-f1j2agKY.js";const u={},d={href:"https://github.com/JujuAdams/Coroutines/releases",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/JujuAdams/Coroutines/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},b={href:"https://discord.gg/8krYCqr",target:"_blank",rel:"noopener noreferrer"},g={id:"协程与gmlive兼容吗",tabindex:"-1"},E={class:"header-anchor",href:"#协程与gmlive兼容吗"},h={href:"https://yellowafterlife.itch.io/gamemaker-live",target:"_blank",rel:"noopener noreferrer"},_={id:"说到yellowafterlife-他也通过gmedit实现了协程。这个库有何不同",tabindex:"-1"},f={class:"header-anchor",href:"#说到yellowafterlife-他也通过gmedit实现了协程。这个库有何不同"},A={href:"https://yellowafterlife.itch.io/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/YellowAfterlife/GMEdit/wiki/Using-%23gmcr-magic",target:"_blank",rel:"noopener noreferrer"},N={href:"https://twitter.com/jujuadams",target:"_blank",rel:"noopener noreferrer"},T={href:"http://www.jujuadams.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://nuxiigit.github.io/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://nuxiigit.github.io/content/blog/post/gml+syntax+extensions.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/shdwcat",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/JujuAdams/Coroutines/wiki/Coroutine-Methods",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/JujuAdams/Coroutines/wiki/Coroutine-Methods#cancel",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/JujuAdams/Coroutines/wiki/Coroutine-Methods#pausereturnvalue",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/JujuAdams/Coroutines/wiki/Coroutines/wiki/Coroutine-Methods#getcomplete",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/JujuAdams/Coroutines/blob/main/scripts/CoroutineEventHook/CoroutineEventHook.gml",target:"_blank",rel:"noopener noreferrer"},S={href:"https://en.wikipedia.org/wiki/Virtual_machine",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.reddit.com/r/gamemaker/comments/9g9v2a/any_documentation_gml_bytecode_and_assembly/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},G={href:"https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get_names.htm",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"};function Y(W,n){const e=l("ExternalLinkIcon");return c(),i("div",null,[n[66]||(n[66]=s("p",null,"协程是由@jujuadams为GameMaker Studio 2.3.6及以上版本设计的一套在GML中异步执行代码的语法扩展",-1)),n[67]||(n[67]=s("hr",null,null,-1)),n[68]||(n[68]=s("p",null,[s("strong",null,"适用GM版本"),a(" : 2.3.6+")],-1)),n[69]||(n[69]=s("p",null,[s("strong",null,"适用目标平台"),a(" ：除HTML5之外的一切平台。")],-1)),s("p",null,[n[1]||(n[1]=s("strong",null,"下载连接",-1)),n[2]||(n[2]=a("：")),s("a",d,[n[0]||(n[0]=a("Github")),t(e)])]),n[70]||(n[70]=s("h2",{id:"常见问题解答",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#常见问题解答"},[s("span",null,"常见问题解答")])],-1)),n[71]||(n[71]=s("h3",{id:"协程在哪些平台上有效",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#协程在哪些平台上有效"},[s("span",null,"协程在哪些平台上有效？")])],-1)),s("p",null,[n[4]||(n[4]=a("除了HTML5之外的所有平台。我目前只在Windows上进行了测试。由于它是纯原生GML，所以应该可以直接使用。在我不经常测试的平台上，你可能会遇到一些边缘情况；如果你发现任何bug，请")),s("a",r,[n[3]||(n[3]=a("报告")),t(e)]),n[5]||(n[5]=a("。"))]),n[72]||(n[72]=s("h3",{id:"这个代码库的许可证是什么-我可以将它用于商业项目吗",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#这个代码库的许可证是什么-我可以将它用于商业项目吗"},[s("span",null,"这个代码库的许可证是什么？我可以将它用于商业项目吗？")])],-1)),s("p",null,[s("a",k,[n[6]||(n[6]=a("这个库是基于MIT许可证发布的")),t(e)]),n[7]||(n[7]=a("。这意味着你可以将它用于任何目的，包括商业项目。如果你能在你的游戏中提到我的名字（Juju Adams）和/或表示感谢，那对我来说意义重大，但你没有义务这么做。"))]),n[73]||(n[73]=s("h3",{id:"我认为你缺少了一个有用的功能-希望你能实现它",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我认为你缺少了一个有用的功能-希望你能实现它"},[s("span",null,"我认为你缺少了一个有用的功能，希望你能实现它！")])],-1)),s("p",null,[n[9]||(n[9]=a("太好了！请提交一个")),s("a",v,[n[8]||(n[8]=a("功能请求")),t(e)]),n[10]||(n[10]=a("。功能请求使协程更加有趣，也给了我在公共交通上无聊时的思考素材。"))]),n[74]||(n[74]=s("h3",{id:"我发现了一个bug-它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我发现了一个bug-它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么"},[s("span",null,"我发现了一个bug，它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么？")])],-1)),s("p",null,[n[13]||(n[13]=a("请提交一个")),s("a",m,[n[11]||(n[11]=a("bug报告")),t(e)]),n[14]||(n[14]=a("。Juju每天都会检查GitHub，通常几天后就会发布bug修复。你也可以在")),s("a",b,[n[12]||(n[12]=a("Discord服务器")),t(e)]),n[15]||(n[15]=a("上找到我，但这不能代替清晰的bug报告。"))]),n[75]||(n[75]=s("h3",{id:"救命-我在编译时遇到了关于异步事件的错误。",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#救命-我在编译时遇到了关于异步事件的错误。"},[s("span",null,"救命！我在编译时遇到了关于异步事件的错误。")])],-1)),n[76]||(n[76]=s("p",null,"由于GMS2.3.6更改了一些与异步事件相关的常量名称，GameMaker v2.3.6之前的版本将无法编译此库。你可以通过查找GM文档中的旧名称并替换它们来自己解决这个问题。",-1)),s("h3",g,[s("a",E,[s("span",null,[n[17]||(n[17]=a("协程与")),s("a",h,[n[16]||(n[16]=a("GMLive")),t(e)]),n[18]||(n[18]=a("兼容吗？"))])])]),n[77]||(n[77]=s("p",null,"我还没有测试过。请让我知道你的发现。",-1)),s("h3",_,[s("a",f,[s("span",null,[n[21]||(n[21]=a("说到")),s("a",A,[n[19]||(n[19]=a("YellowAfterlife")),t(e)]),n[22]||(n[22]=a("，他也通过GMEdit")),s("a",C,[n[20]||(n[20]=a("实现了协程")),t(e)]),n[23]||(n[23]=a("。这个库有何不同？"))])])]),n[78]||(n[78]=s("p",null,"Vadim在GameMaker Studio 2.3引入匿名函数之前就实现了他的协程。它是一个非常聪明的技术解决方案，解决了旧版本GM中许多缺失的功能。幸运的是，现在GameMaker更加灵活，这个库充分利用了新功能来实现协程。",-1)),n[79]||(n[79]=s("h3",{id:"谁编写了代码",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#谁编写了代码"},[s("span",null,"谁编写了代码？")])],-1)),s("p",null,[n[26]||(n[26]=a("这个库是由")),s("a",N,[n[24]||(n[24]=a("@jujuadams")),t(e)]),n[27]||(n[27]=a("构建和维护的，他长期以来一直在研究GameMaker的内部机制。Juju参与了许多")),s("a",T,[n[25]||(n[25]=a("商业GameMaker游戏")),t(e)]),n[28]||(n[28]=a("的开发。"))]),s("p",null,[n[32]||(n[32]=a("许多宏的想法基于")),s("a",O,[n[29]||(n[29]=a("Katsaii")),t(e)]),n[33]||(n[33]=a("在她著名（臭名昭著？）的")),s("a",I,[n[30]||(n[30]=a("宏黑客文章")),t(e)]),n[34]||(n[34]=a("中提出的想法。")),s("a",x,[n[31]||(n[31]=a("shdwcat")),t(e)]),n[35]||(n[35]=a("也在库的公共发布前提供了一些建议，帮助指导了库的发展方向，她从编写自己的协程系统中学到了一些东西。"))]),n[80]||(n[80]=o(`<h3 id="我可以向你捐款吗-你会开始一个patreon吗" tabindex="-1"><a class="header-anchor" href="#我可以向你捐款吗-你会开始一个patreon吗"><span>我可以向你捐款吗？你会开始一个Patreon吗？</span></a></h3><p>感谢你愿意表示感谢——这对我个人来说意义重大——但我很幸运能从游戏开发中获得稳定的收入。我目前没有打算作为创作者加入Patreon。如果你想支持我的工作，可以在你的游戏中提到我，和/或在你选择的社交媒体平台上给我一个喊话。</p><h2 id="协程简介" tabindex="-1"><a class="header-anchor" href="#协程简介"><span>协程简介</span></a></h2><p><em>本节是一个关于协程如何帮助你制作游戏的高级描述。如果你想了解更技术性的描述，请参见 [[协程是如何执行的？]] 和 [[我们如何扩展GML？]]</em></p><p>当你编写代码并运行你的游戏时，你编写的代码是按顺序执行的，每个命令在前一个命令完成后立即执行。我们将代码存储在函数中，意图是程序将从一个函数移动到下一个函数，使游戏工作。当程序进入一个函数时，它必须完成整个函数（或至少到达一个 <code>return</code> 命令）后才能退出该函数并运行其他代码。这被称为“同步执行”，这是GameMaker的工作方式——代码是同步运行的，一行接一行，每帧数千行代码分布在数百个函数中。</p><p>异步函数的操作方式不同。异步函数<strong>不需要</strong>在程序离开该函数并做其他事情之前完全完成所有代码，更重要的是，异步函数可以从暂停的地方继续执行。这意味着你可以编写一些代码，在执行过程中允许整个程序去做其他事情，然后稍后再回到该函数继续执行。</p><p>此库允许你在GameMaker中编写可暂停的函数。这些可暂停的函数称为“协程”：一段可以在执行过程中暂停并在稍后继续的代码块。</p><p>许多语言原生支持编写异步代码，无论是作为核心语言特性，还是作为支持异步执行的库。GML属于后者。因此，有必要开发我们自己的系统来模拟支持异步函数的语言的特性和行为。从纯函数构建协程是笨拙且难以理解的，因此此库<a href="Coroutines/wiki/Coroutine-Syntax">扩展了GML的语法</a>，以便我们能够以更优雅的方式描述协程。</p><h3 id="一个示例" tabindex="-1"><a class="header-anchor" href="#一个示例"><span>一个示例</span></a></h3><p>让我们来看一个简单的例子：过场动画。</p><p>制作过场动画是一场噩梦，多年来人们花费了大量精力设计和构建不同的解决方案来解决过场动画问题。最常见的解决方案是使用一个大的 switch...case 语句来控制哪个实例在什么时候做什么。构建这些系统非常耗时，而且它们总是最终变得丑陋且难以管理。实际上，我们想要的过场动画函数是一个异步函数——一个可暂停的函数，它可以向游戏传递指令以动画化对象和显示文本，而不会阻止游戏的其余部分运行。</p><p>这里是一个过场动画的示例。稍后我们会详细解释发生了什么，但这应该会让你了解使用协程可以实现的功能：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function CutsceneFindMyFroggy()
{
	return CO_BEGIN
		// 防止玩家使用正常的控制移动
		oPlayer.inCutscene = true;
		
		// 让玩家走进房间
		WHILE (oPlayer.x != 55) THEN
			oPlayer.x = min(oPlayer.x + 2, 55);
			YIELD THEN
		END
		
		// 显示一些对话
		oTextbox.text = &quot;我的青蛙在哪里？&quot;;
		oTextbox.expression = sPlayerSad;
		AWAIT keyboard_check_pressed(vk_space) THEN
		
		oTextbox.text = &quot;...&quot;;
		
		// 为了喜剧效果暂停片刻
		DELAY 350 THEN // 毫秒
		
		oTextbox.text = &quot;呱呱！&quot;;
		oTextbox.expression = sFrog;
		audio_play_sound(sndLonelyRibbit, 1, false);
		
		// 让青蛙跳进玩家的怀里
		WHILE (oFrog.x != 55) THEN
			oFrog.x = max(oFrog.x - 2, 55);
			YIELD THEN
		END
		
		oTextbox.text = &quot;啊，她在这儿！谁是我的美丽两栖动物？&quot;;
		oTextbox.expression = sPlayerHappy;
		AWAIT keyboard_check_pressed(vk_space) THEN
		
		oTextbox.text = &quot;呱呱！ :)&quot;;
		oTextbox.expression = sFrog;
		audio_play_sound(sndHappyRibbit, 1, false);
		AWAIT keyboard_check_pressed(vk_space) THEN
		
		// 清空文本框然后释放玩家
		oTextbox.text = &quot;&quot;;
		player.inCutscene = false;
	CO_END
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种语法与普通的GML有些不同。特别值得注意的是使用了一些新的流程控制关键字。你可能以前见过 <code>WHILE</code>（虽然是小写的 <code>while</code> 循环命令），但很多其他全大写的命令是新的或不熟悉的。</p><p><code>CO_BEGIN</code> 和 <code>CO_END</code> 定义了协程的起点和终点。这两个标记之间的所有内容构成了协程的代码。在整个协程中可以使用普通的GML，例如修改其他实例中的变量，但为了启用协程特定的行为，必须使用特殊的协程语法。<code>THEN</code> 和 <code>END</code> 是结构命令，它们的用法类似于打开 <code>{</code> 和关闭 <code>}</code> 大括号。</p><p><code>AWAIT</code> 和 <code>DELAY</code> 是为方便提供的命令。<code>AWAIT</code> 会在那行代码暂停协程，直到条件返回 <code>true</code>。在上面的示例中，我们正在等待用户按下空格键，然后再将过场动画推进到后续指令。<code>DELAY</code> 会等待一段时间（以毫秒为单位）再继续。</p><p>最后，我们有一个不寻常的命令 <code>YIELD</code>。这个函数是协程的核心。当协程遇到 <code>YIELD</code> 命令时，它会立即跳出协程并允许你的游戏执行其他指令。在下一步中，协程将从 <code>YIELD</code> 命令处继续执行代码。</p><p>简化过场动画处理只是一个开始：协程还可以用于UI动画、复杂的网络协议、REST API和OAuth流程、多阶段视觉效果、异步保存/加载（主机开发所需）等。它们非常有用，现在它们已经在GameMaker中实现了。</p><h2 id="协程是如何执行的" tabindex="-1"><a class="header-anchor" href="#协程是如何执行的"><span>协程是如何执行的？</span></a></h2><p><em>本文档解释了协程执行的基本原理，以及如何使用函数调用生成协程。如果你想了解GML语法扩展的内部工作原理，请参见[我们如何扩展GML]</em></p><h3 id="执行" tabindex="-1"><a class="header-anchor" href="#执行"><span>执行</span></a></h3>`,21)),s("p",null,[n[37]||(n[37]=a("此库中的协程执行围绕“协程根结构”进行，这是一个数据容器，既管理协程的执行又存储协程状态（协程执行时读写的变量）。每当你为协程编写代码时，它会自动作用于协程的范围内。这意味着你可以编写代码而不必担心是否意外访问了其他地方的数据——从某种意义上说，协程中的每个变量都是局部的。根结构也是执行")),s("a",w,[n[36]||(n[36]=a("协程方法")),t(e)]),n[38]||(n[38]=a("的目标范围。"))]),s("p",null,[n[42]||(n[42]=a("当创建一个协程时，它会在每帧处理的全局协程列表中注册。因此，协程会自动执行，无需额外的代码来运行它们。当然，你可以在任何时候使用相关方法")),s("a",y,[n[39]||(n[39]=a("取消")),t(e)]),n[43]||(n[43]=a("或")),s("a",q,[n[40]||(n[40]=a("暂停")),t(e)]),n[44]||(n[44]=a("协程。当一个协程")),s("a",R,[n[41]||(n[41]=a("完成")),t(e)]),n[45]||(n[45]=a("时，它会从全局列表中移除，这意味着分配给它的内存将被垃圾回收，前提是你的代码没有引用它。"))]),s("p",null,[n[47]||(n[47]=a("如上所述，协程每帧自动执行。不幸的是，GameMaker没有使这变得容易，我们实际上需要在某个实例的Step事件中挂钩，以便协程能够执行。这就是")),s("a",L,[n[46]||(n[46]=s("code",null,"CoroutineEventHook()",-1)),t(e)]),n[48]||(n[48]=a("函数的目的。请注意，此函数还包含处理异步事件的代码——同样的问题，我们需要一个实例来执行事件钩子函数，以便协程接收到任何异步事件。"))]),n[81]||(n[81]=o(`<h3 id="生成" tabindex="-1"><a class="header-anchor" href="#生成"><span>生成</span></a></h3><p>当定义一个协程时，根结构会被赋予一系列需要执行的指令。指令可以简单地是“运行这段GML代码”，也可以是流程控制（循环和分支），或者是需要根结构等待进一步输入的行为。指令通过函数调用添加到根结构中，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">__CoroutineFunction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指令1</span>
<span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">__CoroutineWhile</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指令2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">__CoroutineFunction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指令3</span>
<span class="token punctuation">{</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;六条消息！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;(i=&quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">__CoroutineYield</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指令4</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">__CoroutineEndLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指令5</span>

<span class="token function">__CoroutineFunction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指令6</span>
<span class="token punctuation">{</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们称一系列添加指令到协程的函数调用为“生成器函数”。注意协程生成器函数需要一个步骤来启动while循环<code>__CoroutineWhile()</code>，并需要另一个指令来结束循环<code>__CoroutineEndLoop()</code>。这个生成器函数等价于以下标准的GML代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;六条消息！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;(i=&quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//YIELD...THEN没有等价物！</span>
<span class="token punctuation">}</span>
<span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过比较生成器函数和它的标准GML等价代码，很明显标准GML更简洁！我们通过扩展GML中的语法解决了这个问题——有关更多信息，请参见[我们如何扩展GML]。</p><p>无论如何，协程是通过这些生成器函数调用构建的。这些函数所做的只是将数据推入一个指令数组，或更改将数据推入哪个指令数组。我们首先将数据写入协程的根结构，但当进入while循环时，我们开始将数据推入while循环中。在结束while循环后，我们返回将指令推入根结构的数组。</p><p>我们可以通过将其写成嵌套数组来进行可视化（为简单起见，我在这里简化了函数调用）：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>根 : [
    i = 0,                        指令1
    while (i &lt; 6) : [             指令2
        &quot;六条消息！&quot;,              指令3
        &quot;(i=&quot; + string(i) + &quot;)&quot;,
        YIELD i,                  指令4
    ],                            指令5
    &quot;完成!&quot;                       指令6
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过将指令分解为这些嵌套数组，我们可以将我们的协程解释为一个遍历其指令数组直到执行完所有指令的机器。数组中的每个指令本身都是一个机器。无论那个内部机器需要做什么，它必须完成其任务，然后外部机器才能继续遍历其指令数组。考虑到根结构在完成其指令时会完全停止，但while循环可能执行其循环数百次，因此显然存在多种类型的机器。</p>`,10)),s("p",null,[n[50]||(n[50]=a("这些机器并不真实，毕竟它们是")),s("a",S,[n[49]||(n[49]=a("虚拟机")),t(e)]),n[51]||(n[51]=a("，这是你可能听说过的一个术语。这里描述的是一种非常简单的VM，但它仍然是一个VM。"))]),n[82]||(n[82]=s("p",null,[a("实际上，每个[命令]都有一个对应的机器。如果你感兴趣，可以通过查看库代码中的"),s("code",null,"System"),a("文件夹来探究控制每种机器的代码。要使用这个库，理解所有细节并不是必需的，但我认为这仍然很有趣。")],-1)),n[83]||(n[83]=s("p",null,"协程的主要特征（不仅仅是这个库）是它们可以暂停和恢复执行。回到我们的机器比喻，每台机器都有记忆：1）是否已完成，如果没有，2）协程暂停前它在做什么。这比听起来要简单。每个协程都有一个根结构，包含所有变量，因此它会保留，而每个机器可以存储其自己的状态跟踪变量。例如，我们示例中的while循环有一个变量跟踪它在指令数组中的位置。当协程恢复时，整个协程会找到哪个内部机器仍有工作要做，并使用该机器的状态变量恢复执行。",-1)),s("p",null,[n[53]||(n[53]=a("这解释了指令如何组织和执行，但具体的代码行呢？通常，对于虚拟机，每一行代码都会被处理。这实际上就是")),s("a",D,[n[52]||(n[52]=a("GameMaker的虚拟机工作方式")),t(e)]),n[54]||(n[54]=a("，每一行代码都会被分解成一系列指令。这个库并没有做这么多的工作，因为我们可以让GameMaker为我们完成！我们可以利用GMS2.3的匿名函数特性（")),n[55]||(n[55]=s("code",null,"function() {}",-1)),n[56]||(n[56]=a("）来准备任意代码，以便在协程需要时执行。"))]),n[84]||(n[84]=o(`<h2 id="我们如何扩展gml" tabindex="-1"><a class="header-anchor" href="#我们如何扩展gml"><span>我们如何扩展GML？</span></a></h2><p>乍一看，向GML添加新语言特性似乎像是魔法。在编写库或者任何可互换代码时，我们通常优先考虑通过函数与系统交互。一些库鼓励你直接编辑变量，其他则使用着色器或表面来实现所需效果，许多库使用宏和枚举来表示该库特有的常量。</p><p>宏非常强大。宏实际上会直接将其值插入到代码中。通常，我们会将宏设置为一个字符串或数字，偶尔会将宏用作我们希望在多个地方使用的表达式。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#macro ON_DIRECTX  ((os_type == os_windows) or (os_type == os_xboxone) or (os_type == os_xboxseriesxs) or (os_type == os_uwp))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们可以在代码库的其他地方使用<code>ON_DIRECTX</code>，根据游戏是否在DirectX平台上运行来执行不同的行为（这对于修复UV坐标的问题非常有用）。在这里，宏被用作封闭表达式——它是完全自包含的，可以在需要的地方插入而无需进一步考虑。</p><p>这个库使用了许多宏，但大多数这些宏<strong>不是</strong>自包含的。库中的宏会将<strong>不完整</strong>的表达式插入到代码中。为了生成有效的、完整的表达式，这些宏必须一起使用。乍一看这似乎是个问题，但它允许我们创建一种可以表达复杂结构的语法。</p><p>让我们来看看<code>CO_BEGIN</code>和<code>CO_END</code>是如何工作的。这两个宏在概念上是最复杂的，但理解它们的工作原理可以解释其他自定义语法宏如何配合在一起。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>#macro <span class="token constant">CO_BEGIN</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">__CoroutineBegin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
#macro <span class="token constant">CO_END</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__CoroutineEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是非常复杂的代码，使用了很多嵌套，难以阅读，所以让我们在上下文中使用它来使事情变得更容易理解。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">CO_BEGIN</span>
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">CO_END</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展开为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// CO_BEGIN</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">__CoroutineBegin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token comment">//我们在协程中放置的单行代码</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//CO_END</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">__CoroutineEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，我们使用宏在协程的内容周围插入合法的GML。让我们进一步拆解实际进行的操作。我将重写一些内容，以便更容易看出生成函数如何返回新的协程根结构体。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token function-variable function">_generatorFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//将一些代码添加到全局协程根结构体 (global.__coroutineNext) 中执行</span>
        <span class="token comment">//在启动时创建一个全局空协程根结构体，并始终可用</span>
        <span class="token comment">//在这个生成函数的末尾生成一个新的结构体，以便在下一个协程中使用</span>
        <span class="token function">__CoroutineBegin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//返回我们刚刚添加代码的协程结构体</span>
        <span class="token keyword">return</span> <span class="token function">__CoroutineEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">//运行生成函数并返回其值（协程根结构体）</span>
    <span class="token keyword">return</span> <span class="token function">_generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，通过宏扩展，我们可以在GML中定义和使用协程。</p><h3 id="宏的强大功能" tabindex="-1"><a class="header-anchor" href="#宏的强大功能"><span>宏的强大功能</span></a></h3><p>使用宏的确可以做很多事情。仅通过两个简单的语句 <code>CO_BEGIN</code> 和 <code>CO_END</code>，我们就能在一个函数内部展开整个协程的功能！你会注意到，<code>CO_BEGIN</code> 以 <code>__CoroutineFunction(function() {</code> 结尾，而 <code>CO_END</code> 以 <code>});</code> 开始。这使得这两个宏能够用于将代码封装在一个函数内部。这是这个库中宏的一个重复模式：一个宏要么是开启一个新函数，要么是关闭一个函数。</p><p>让我们通过引入另外三个宏来使我们的示例更加复杂。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>#macro <span class="token constant">REPEAT</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__CoroutineRepeat</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 
#macro <span class="token constant">THEN</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__CoroutineThen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
#macro <span class="token constant">END</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__CoroutineEndLoop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是协程本身的示例：</p><p><em><strong>请注意</strong></em>，在这里使用 <code>REPEAT 5 THEN ... END</code> 是完全不必要的，<code>repeat(5) {}</code> 就足够了。<code>REPEAT</code>（以及 <code>WHILE</code> / <code>IF</code> / <code>FOREACH</code>）只有在循环中包含 <code>YIELD</code> 命令时才<strong>是必需的</strong>。我们在这里使用协程版本的循环仅作为示例。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">CO_BEGIN</span>
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">REPEAT</span> <span class="token number">5</span> <span class="token constant">THEN</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Wow!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">END</span>
    <span class="token constant">CO_END</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展开为以下的生成函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// CO_BEGIN</span>
    <span class="token keyword">var</span> <span class="token function-variable function">_generatorFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">__CoroutineBegin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 第一行代码</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
            <span class="token comment">// REPEAT</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineRepeat</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 5 来自 REPEAT 和 THEN 之间的数字</span>
        
            <span class="token comment">// THEN</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineThen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 第二行代码</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Wow!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
            <span class="token comment">// END</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineEndLoop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        
            <span class="token comment">// CO_END</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 返回我们刚刚添加代码的协程结构体</span>
        <span class="token keyword">return</span> <span class="token function">__CoroutineEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 运行生成函数并返回其值（协程根结构体）</span>
    <span class="token keyword">return</span> <span class="token function">_generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后一个函数是空的。这个宏系统的一个特性就是这种情况很常见！</p><p>现在，应该可以清楚地看到这些宏如何作为不完整的表达式链接在一起以生成有效的GML。实际上，这些宏并没有做比其他库中的函数调用更多的事情。它们的强大之处在于如何隐藏功能组件的细节，从而使编写代码时不被屏幕上的函数调用混淆。</p><h3 id="宏示例总结" tabindex="-1"><a class="header-anchor" href="#宏示例总结"><span>宏示例总结</span></a></h3><p>宏的使用实际上是为了隐藏复杂的函数调用，使得代码更加简洁。下面是宏展开的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// CO_BEGIN</span>
    <span class="token keyword">var</span> <span class="token function-variable function">_generatorFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">__CoroutineBegin</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;What an incredible function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineRepeat</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 5 是 REPEAT 和 THEN 之间的数字</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineThen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Wow!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">__CoroutineEndLoop</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">__CoroutineEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token function">_generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过宏，我们可以在GML中实现复杂的协程行为，而不必显式地处理大量的底层函数调用和管理代码。宏的设计使得复杂的功能变得易于使用，帮助开发者集中精力在实际的逻辑和功能实现上。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p><code>__CoroutinesConfig()</code>是一个包含少量宏的脚本，可以用来定制协程库的全局行为。如果你想改变库的默认行为，你应该编辑这些宏。</p><h3 id="coroutines-check-syntax" tabindex="-1"><a class="header-anchor" href="#coroutines-check-syntax"><span><code>COROUTINES_CHECK_SYNTAX</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>是否对协程进行运行时语法检查。这在启动协程时有性能上的损失，但在执行协程时没有。此外，语法检查是一个实验性的功能。如果你发现语法检查器没有帮助的话，它可能会抛出假的结果。</p>`,35)),s("ol",null,[s("li",null,[s("a",H,[n[57]||(n[57]=a("提交一个错误报告!")),t(e)]),n[58]||(n[58]=a(" 这个问题很可能是可以解决的!"))]),n[59]||(n[59]=s("li",null,[a("将此宏设置为 "),s("code",null,"false")],-1))]),n[85]||(n[85]=o(`<p>此外，运行时语法检查在创建一个协程程序时有一点小的性能损失。如果你觉得你需要更多的速度，你可能想把这个宏设置为&quot;false&quot;来回收一点CPU时间。  </p><h3 id="coroutines-delay-realtime" tabindex="-1"><a class="header-anchor" href="#coroutines-delay-realtime"><span><code>COROUTINES_DELAY_REALTIME</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>将此宏设置为<code>true</code>，以测量<code>DELAY</code>命令的持续时间，单位为毫秒。如果你需要每一帧的准确性，那么将这个宏设置为<code>false</code>。</p><p> </p><h3 id="coroutines-default-cancel-when-orphaned" tabindex="-1"><a class="header-anchor" href="#coroutines-default-cancel-when-orphaned"><span><code>COROUTINES_DEFAULT_CANCEL_WHEN_ORPHANED</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>当协程的主体被销毁或被垃圾回收时，取消轮子的行为。一个特定的程序在成为孤儿时是否被取消，也可以用<code>.CancelWhenOrphaned()</code>方法来控制。</p><p><strong>注意：</strong> 一个停用的实例算作一个不存在的实例。</p><p> </p><h3 id="coroutines-default-creator-weak-reference" tabindex="-1"><a class="header-anchor" href="#coroutines-default-creator-weak-reference"><span><code>COROUTINES_DEFAULT_CREATOR_WEAK_REFERENCE</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>这个宏与上面那个宏有关。如果你在一个结构的范围内创建一个coroutine，coroutine需要保持对该结构的引用，以便<code>.GetCreator()</code>方法能够返回一个值。如果你期望（或打算）该结构在某一时刻被垃圾回收，这将导致一个问题，因为如果coroutine持有一个强引用，coroutine将保持该结构的活力。将此宏设置为&quot;true &quot;将默认每个结构的引用为弱引用，以避免这一问题。可以使用<code>.WeakReference()</code>方法来进一步调整单个coroutine持有的引用类型。</p><p> </p><h3 id="coroutines-gamemaker-broadcasts-trigger-native" tabindex="-1"><a class="header-anchor" href="#coroutines-gamemaker-broadcasts-trigger-native"><span><code>COROUTINES_GAMEMAKER_BROADCASTS_TRIGGER_NATIVE</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>Coroutines有它自己的本地广播系统。广播可以用<code>CoroutineBroadcast()</code>函数进行，监听器可以用<code>AWAIT_BROADCAST</code>设置。GameMaker有自己的广播系统，精灵和序列可以发射事件。GameMaker的广播可以被Coroutine使用<code>AWAIT_ASYNC_BROADCAST</code>接收，并且GameMaker的全局变量<code>event_data</code>将被访问，正如你所期望的那样。Coroutine的广播和GameMaker的广播是两个不同的系统，通常不会相互影响。</p><p>有时能够使用<code>AWAIT_BROADCAST</code>来接收GameMaker的广播是很有用的。将这个宏设置为<code>true</code>将允许GameMaker广播触发本地Coroutine广播监听器。然而，如果GameMaker广播触发了一个本地监听器，那么<code>event_data</code>将不能被访问。将此宏设置为 &quot;true &quot;不会禁用 <code>AWAIT_ASYNC_BROADCAST</code>，所以要注意不要混淆行为。</p><h2 id="协程语法" tabindex="-1"><a class="header-anchor" href="#协程语法"><span>协程语法</span></a></h2><p>以下是用于定义coroutine的有效命令宏。请记住，每个cououtine命令宏之间的代码都在独立的GML函数中。这些函数在同一范围内执行（coroutine根结构），但由于在不同的函数中，它们不能共享局部变量（&quot;var&quot;变量）。</p><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h3><h4 id="co-begin-和-co-end" tabindex="-1"><a class="header-anchor" href="#co-begin-和-co-end"><span><code>CO_BEGIN</code> 和 <code>CO_END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_BEGIN</code>和<code>CO_END</code>被要求放在所有Coroutine代码的括号内。COROUTINE命令必须放在这两条命令中才有效（否则你可能会遇到致命的编译错误）。<code>CO_BEGIN</code>为创建的coroutine实例返回一个coroutine根结构。如果你想从coroutine中读取数值或使用方法控制其执行，那么你将需要保持对coroutine根结构的引用。</p><p>创建一个程序将自动把它添加到一个全局的程序列表中，以便每一帧都被执行。一旦该程序完成，它将被从全局执行中移除，并可用于内存回收。当然，如果你在该程序完成后还保持着对该程序的引用，那么在你持有的引用也被丢弃之前，它将不会被垃圾回收。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example parent coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    CO_BEGIN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example child coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CO_END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Coroutine定义可以相互嵌套，因此一个coroutine父级可以创建额外的coroutine子级。在一个父下创建的子将继续执行，无论父是否被暂停、取消或以其他方式进行交互。每个子程序都存在于它自己的范围内，因此每个子程序内的变量对该程序来说是唯一的。父和子不共享变量，子代程序之间也不共享变量。</p><p>子程序不会阻止父程序的执行——如果你想让子程序阻止其父程序的执行，请使用<code>RACE</code>或<code>SYNC</code>命令（或者使用<code>AWAIT</code>创建你自己的功能）。</p><p> </p><h4 id="then" tabindex="-1"><a class="header-anchor" href="#then"><span><code>THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This will&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;be displayed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;in the&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;same frame&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>THEN</code>本身没有特别的意义，如果在没有上下文的情况下使用，只是将代码块附加到前面的代码块的末尾。然而，<code>THEN</code>在许多地方是必需的语法，应该按照这些命令的指示来使用。</p><p> </p><h4 id="co-params-variable" tabindex="-1"><a class="header-anchor" href="#co-params-variable"><span><code>CO_PARAMS.&lt;variable&gt;</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>function <span class="token function">ShowPopUpMessageTwice</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CO_PARAMS<span class="token punctuation">.</span>message <span class="token operator">=</span> _message<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> CO_BEGIN
        <span class="token function">show_message</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DELAY <span class="token number">1000</span> THEN
        <span class="token function">show_message</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CO_END
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_PARAMS</code>允许你在定义程序之前在程序中设置变量。如果你的coroutine位于一个启动新coroutine的函数内，这对传递参数很有帮助。</p><p> </p><h4 id="co-on-complete" tabindex="-1"><a class="header-anchor" href="#co-on-complete"><span><code>CO_ON_COMPLETE</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    list <span class="token operator">=</span> <span class="token function">ds_list_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_ON_COMPLETE
    <span class="token comment">//Clean up the list to avoid a memory leak</span>
    <span class="token function">ds_list_destroy</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_ON_COMPLETE</code>增加了额外的、最终的代码，当它完成时，将由coroutine执行。<code>CO_ON_COMPLETE</code>在调用<code>.Restart()</code>方法时也将被执行。</p><p><strong>请注意</strong>，<code>CO_ON_COMPLETE</code>代码的内容必须是简单的GML。这意味着你不能在代码块内使用coroutine命令。</p><p> </p><h4 id="co-scope-struct-instance" tabindex="-1"><a class="header-anchor" href="#co-scope-struct-instance"><span><code>CO_SCOPE = &lt;struct/instance&gt;</code></span></a></h4><p><strong>这是为方便而提供的高级功能，在使用时不应不加注意。</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">////Create Event of an object</span>
<span class="token comment">//Set the scope of the next coroutine to ourselves (CO_SCOPE is reset by CO_END)</span>
CO_SCOPE <span class="token operator">=</span> self<span class="token punctuation">;</span>
<span class="token comment">//Start </span>
CO_BEGIN
    WHILE <span class="token boolean">true</span> THEN <span class="token comment">//Repeat forever!</span>
        <span class="token comment">//Randomize our position and angle</span>
        image_angle <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> xprevious <span class="token operator">+</span> <span class="token function">random_range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">=</span> yprevious <span class="token operator">+</span> <span class="token function">random_Range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Wait 120ms before doing this again</span>
        DELAY <span class="token number">120</span> THEN
    END
CO_END
<span class="token comment">////Draw Event</span>
<span class="token function">draw_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时不时地，让一个coroutine直接与一个实例（或结构）的状态进行交互是很有用的。<code>CO_PARAMS</code>和<code>.GetCreator()</code>是为了帮助coroutine和游戏中的其他数据容器之间顺利互动而提供的，但在特定范围内调用代码可能是有利的。</p><p>当一个协程被生成时，每个命令之间的所有代码被收集在一个本地GameMaker函数中。这个函数的范围，默认情况下，被强制为根coroutine结构。这确保了实例变量总是在一个隔离的环境中被创建和修改。虽然这比其他方法要安全得多，但也会有不便之处。<code>CO_SCOPE</code>覆盖了默认的行为（范围为coroutine结构），这样函数的范围为你选择的实例或结构。</p><p>然而，coroutine结构仍然被生成，并将作为调用coroutine方法的端点而存在。所有的程序方法仍然可以通过直接引用由<code>CO_BEGIN</code>返回的程序结构来访问。</p><p><code>CO_SCOPE</code>适用于下一个程序定义，并且只适用于下一个定义。当<code>CO_END</code>被调用时，<code>CO_SCOPE</code>将被重置为默认行为（范围为根冠状结构）。在这方面，<code>CO_SCOPE</code>类似于<code>CO_PARAMS</code>。</p><p><strong>请注意</strong>，通过使用<code>CO_SCOPE</code>，很容易产生冲突，即两个coroutine争相为一个实例设置相同的值。这可能会导致令人不快和棘手的bug的修复。<strong>使用该功能的风险由你自己承担</strong>。</p><p> </p><h4 id="co-local-variable" tabindex="-1"><a class="header-anchor" href="#co-local-variable"><span><code>CO_LOCAL.&lt;variable&gt;</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>CO_PARAMS<span class="token punctuation">.</span>cells_to_travel <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
CO_SCOPE <span class="token operator">=</span> self<span class="token punctuation">;</span>
CO_BEGIN
    CO_LOCAL<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//Use a coroutine variable to count how many times we&#39;ve moved</span>
    WHILE CO_LOCAL<span class="token punctuation">.</span>i <span class="token operator">&lt;</span> CO_LOCAL<span class="token punctuation">.</span>cells_to_travel THEN
	    
        <span class="token comment">//Move down the grid, 32px at a time</span>
        y <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span> 
        
        <span class="token comment">//Change our sprite</span>
        sprite_index <span class="token operator">=</span> sprMoveDown<span class="token punctuation">;</span>
        
        <span class="token comment">//Wait 90ms before doing this again</span>
        DELAY <span class="token number">90</span> THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_LOCAL</code>包含一个对当前正在处理的循环程序的引用。默认情况下，<code>CO_LOCAL</code>将是coroutine代码块内部的<code>self</code>作用域。如果你使用<code>CO_SCOPE</code>（见上文），情况就会改变，因为现在的coroutine代码块是在其他实例/结构的范围内运行。为了能够引用由coroutine根结构持有的沙盒变量，需要<code>CO_LOCAL</code>。</p><p> </p><p> </p><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h3><h4 id="yield-expression-then" tabindex="-1"><a class="header-anchor" href="#yield-expression-then"><span><code>YIELD &lt;expression&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This will&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;be displayed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;over several&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;different frames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    REPEAT <span class="token number">5</span> THEN
        YIELD i THEN <span class="token comment">//Yield the values 1, 2, 4, 8, 16 over 5 frames</span>
        i <span class="token operator">*=</span> <span class="token number">2</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>YIELD</code>指示协程程序暂时停止执行协程程序并返回一个值。与<code>PAUSE...THEN</code>或<code>RETURN</code>不同，执行将在下一帧恢复，不需要任何其他动作。由<code>YIELD</code>发出的值可以使用<code>.Get()</code>方法从coroutine中读取。如果在<code>YIELD</code>和<code>THEN</code>之间没有指定值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>YIELD</code>命令后面必须有<code>THEN</code>命令。如果你忘记了<code>THEN</code>命令，那么代码将神秘地不能运行，并且会出现&quot;跳过&quot;。</p><p> </p><h4 id="pause-expression-then" tabindex="-1"><a class="header-anchor" href="#pause-expression-then"><span><code>PAUSE &lt;expression&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;left&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;right&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look left again&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;left&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Then cross the road&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PAUSE</code>指示coroutine立即暂停执行并返回一个值。这与<code>YIELD</code>的行为类似，但与<code>YIELD</code>不同的是，一个暂停的coroutine<strong>不会</strong>在下一帧恢复执行。你将需要调用<code>.Resume()</code>方法来恢复暂停的 coroutine 的执行。由<code>PAUSE</code>发出的值可以使用<code>.Get()</code>方法从该协程程序中读取。如果在<code>PAUSE</code>和<code>THEN</code>之间没有指定值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>PAUSE</code>命令后面必须有<code>THEN</code>命令。如果你忘记了<code>THEN</code>命令，那么代码将神秘地不能运行，并出现&quot;跳过&quot;。</p><p> </p><h4 id="return-expression" tabindex="-1"><a class="header-anchor" href="#return-expression"><span><code>RETURN &lt;expression&gt;</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    IF oPlayer<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token number">55</span> THEN
        RETURN <span class="token string">&quot;Too far right&quot;</span>
    ELSE
        <span class="token function">CutsceneFindMyFroggy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RETURN <span class="token string">&quot;Playing cutscene&quot;</span>
    END_IF
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RETURN</code>指示coroutine立即完成执行并返回给定值。与<code>YIELD</code>或<code>PAUSE</code>不同的是，该程序的执行被完全停止（尽管该程序可以通过<code>.Restart()</code>方法重新启动）。由<code>RETURN</code>发出的值可以用<code>.Get()</code>方法从该协程程序中读取。如果在<code>RETURN</code>后没有指定任何值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>RETURN</code>命令后面不需要有<code>THEN</code>命令。任何写在<code>RETURN</code>命令后面的东西当然不会被执行，就像GML的本地<code>return</code>命令。</p><p> </p><h4 id="restart" tabindex="-1"><a class="header-anchor" href="#restart"><span><code>RESTART</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">CreateSmokeParticle</span><span class="token punctuation">(</span>oChimney<span class="token punctuation">.</span>x<span class="token punctuation">,</span> oChimney<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DELAY <span class="token function">random_range</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span> THEN
    RESTART
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RESTART</code>指示异步协程产生，然后在下一个异步协程框架中，restart执行。如果调用coroutine结构上的<code>.Get()</code>方法，一个被重新启动的coroutine将返回<code>undefined</code>。通过将<code>RESTART</code>放在一个循环程序的末尾，你可以让一个循环程序无休止地循环，直到被cancel。<code>CO_ON_COMPLETE</code>将在重新启动一个循环程序时被调用。</p><p><strong>请注意，循环程序中的变量不会被重置。</strong></p><p><strong>请注意</strong>，<code>RESTART</code>命令后面不需要有<code>THEN</code>命令。任何写在<code>RESTART</code>命令后面的东西都不会被执行，就像GML的本地<code>return</code>命令。</p><p> </p><p> </p><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><h4 id="end" tabindex="-1"><a class="header-anchor" href="#end"><span><code>END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它本身没有任何作用。然而，<code>END</code>对于终止<code>REPEAT</code>、<code>WHILE</code>或<code>FOREACH</code>循环是必要的。它也应该被用来终止<code>RACE</code>或<code>SYNC</code>块。在其他情况下，不能使用它。</p><p> </p><h4 id="repeat-expression-then-function-end" tabindex="-1"><a class="header-anchor" href="#repeat-expression-then-function-end"><span><code>REPEAT &lt;expression&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>repeat()</code>循环。没有必要在<strong>所有的情况</strong>下使用这个宏来取代标准的<code>repeat()</code>循环。只有当<code>repeat()</code>循环包含一个coroutine命令时，才<strong>需要</strong>使用<code>REPEAT...END</code>循环。</p><p> </p><h4 id="while-condition-then-function-end" tabindex="-1"><a class="header-anchor" href="#while-condition-then-function-end"><span><code>WHILE &lt;condition&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    fireball <span class="token operator">=</span> <span class="token function">instance_create_depth</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span>x<span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oFireball<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Wait until the fireball has risen above the player by 30 pixels</span>
    WHILE fireball<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> fireball<span class="token punctuation">.</span>ystart <span class="token operator">-</span> <span class="token number">30</span> THEN
        fireball<span class="token punctuation">.</span>y <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        YIELD THEN
    END
    
    <span class="token comment">//Then shoot the fireball at the nearest enemy!</span>
    nearest <span class="token operator">=</span> <span class="token function">instance_nearest</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span>x<span class="token punctuation">,</span> fireball<span class="token punctuation">.</span>ystart<span class="token punctuation">,</span> oEnemy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token function">point_direction</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span>x<span class="token punctuation">,</span> fireball<span class="token punctuation">.</span>y<span class="token punctuation">,</span> nearest<span class="token punctuation">.</span>x<span class="token punctuation">,</span> nearest<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WHILE</code>类似于GameMaker自己的<code>while()</code>循环。没有必要在<strong>所有的情况</strong>下使用这个宏来取代标准的<code>while()</code>循环。只有当<code>while()</code>循环包含一个coroutine命令时，才<strong>需要</strong>使用<code>WHILE...END</code>循环。</p><p> </p><h4 id="foreach-iteratorvariable-in-iterabledata-then-function-end" tabindex="-1"><a class="header-anchor" href="#foreach-iteratorvariable-in-iterabledata-then-function-end"><span><code>FOREACH &lt;iteratorVariable&gt; IN &lt;iterableData&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-GML line-numbers-mode" data-ext="GML" data-title="GML"><pre class="language-GML"><code>coroutineRootStruct = CO_BEGIN
    highestHP = 0;
    highestInstance = noone;
    
    //Find the enemy from our array with the highest HP
    FOREACH instance IN global.arrayOfEnemies THEN
        if (instance.hp &gt; highestHP)
        {
            highestHP = instance.hp;
            highestInstance = instance;
        }
    END
    
    //Bash them!
    if (instance_exists(lowestInstance)) hp -= 100;
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FOREACH...THEN</code>循环是一个方便的功能，它在以下两种情况下进行迭代</p><ol><li>一个数组。</li><li>一个结构。</li><li>一个对象的实例。</li><li>或从一个循环程序输出的\`YIELD&#39;。</li></ol>`,98)),s("p",null,[n[61]||(n[61]=a("当在数组上迭代时，迭代器变量是由数组本身给出的值。当迭代结构时，迭代器变量从结构中获得数值；要迭代结构的键，请使用")),s("a",G,[n[60]||(n[60]=s("code",null,"variable_struct_get_names()",-1)),t(e)]),n[62]||(n[62]=a("。"))]),n[86]||(n[86]=o(`<p>当迭代对象的实例时，迭代器变量被赋予实例引用（实例的结构表示，例如，在实例的范围内调用\`self&#39;得到的）。<strong>请注意</strong>，&quot;FOREACH &quot;循环的行为与GameMaker的本地 &quot;with() &quot;循环不同：&quot;FOREACH &quot;循环中的代码范围不会改变。</p><p>当迭代一个循环的输出时，<code>YIELD</code>值被分配给迭代器变量。<code>FOREACH...THEN</code>循环将在可迭代的循环程序完成时终止。</p><p><strong>请注意</strong>不要修改你正在迭代的数组或结构。当<code>FOREACH...THEN</code>循环开始时，迭代的总数被计算出来，如果数组或结构的大小发生变化，则可能导致崩溃和其他错误。</p><p> </p><h4 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span><code>BREAK</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    healthRemaining <span class="token operator">=</span> oPlayer<span class="token punctuation">.</span>hp<span class="token punctuation">;</span>
    FOREACH heart IN global<span class="token punctuation">.</span>heartInstances THEN
        heart<span class="token punctuation">.</span>sprite_index <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> healthRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
        healthRemaining <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>healthRemaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> BREAK<span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>break</code>命令。立即脱离<code>REPEAT...THEN</code>、<code>WHILE...THEN</code>或<code>FOREACH...THEN</code>循环，不执行循环中的其他代码。循环中的其余代码将正常执行。</p><p><strong>请注意</strong>，标准的GML <code>break</code> 命令不会在coroutine循环中发挥作用。</p><p> </p><h4 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span><code>CONTINUE</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    FOREACH enemy IN objEnemy THEN
        IF <span class="token function">point_distance</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span>x<span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span>y<span class="token punctuation">,</span> enemy<span class="token punctuation">.</span>x<span class="token punctuation">,</span> enemy<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span> THEN
            CONTINUE
        END_IF
        
        enemy<span class="token punctuation">.</span>vspeed <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>continue</code>命令。强制执行一个循环（无论是 <code>REPEAT...THEN</code>，<code>WHILE...THEN</code>，还是 <code>FOREACH...THEN</code> 循环），立即进入下一个迭代，而不执行循环中的其他代码。</p><p><strong>请注意</strong>，标准的GML<code>continue</code>命令在coroutine循环中不起作用。</p><p> </p><p> </p><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h3><h4 id="if-condition-then-function-end-if-and-else-and-else-if" tabindex="-1"><a class="header-anchor" href="#if-condition-then-function-end-if-and-else-and-else-if"><span><code>IF &lt;condition&gt; THEN &lt;function&gt; END_IF</code> (and <code>ELSE</code> and <code>ELSE_IF</code>)</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    healthRemaining <span class="token operator">=</span> oPlayer<span class="token punctuation">.</span>hp<span class="token punctuation">;</span>
    
    FOREACH heart IN global<span class="token punctuation">.</span>heartInstances THEN
        heart<span class="token punctuation">.</span>sprite_index <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> healthRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
        healthRemaining <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        
        <span class="token function">IF</span> <span class="token punctuation">(</span>healthRemaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> THEN
            BREAK<span class="token punctuation">;</span>
        END_IF
        
        YIELD THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>if</code>和<code>else</code>命令。一个IF必须由一个<code>END_IF</code>来匹配。通常不需要使用这些特定的命令。如果if-else（或else-else等）本身包含一个coroutine命令，你应该使用这些宏，但<code>ASYNC_COMPLETE</code>除外。<code>ELSE</code>和<code>ELSE_IF</code>也被支持。</p><p><strong>请注意</strong>，<code>ELSE IF</code>是不正确的语法，会导致编译错误，请确保使用<code>ELSE_IF</code>。</p><p> </p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><h4 id="delay-expression-then" tabindex="-1"><a class="header-anchor" href="#delay-expression-then"><span><code>DELAY &lt;expression&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    WHILE <span class="token function">instance_exists</span><span class="token punctuation">(</span>oRainbow<span class="token punctuation">)</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_red<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_orange<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_yellow<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_lime<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_aqua<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span>image_blend <span class="token operator">=</span> c_purple<span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DELAY</code>是一个方便的行为，它将暂停一个循环程序的实际时间量。延迟的时间是以毫秒为单位的；一秒钟是1000毫秒，在60FPS下，一个单帧是（大约）16.66ms。</p><p><strong>请注意</strong>，当一个程序在等待<code>DELAY</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回&quot;true&quot;。</p><p> </p><h4 id="await-condition-then" tabindex="-1"><a class="header-anchor" href="#await-condition-then"><span><code>AWAIT &lt;condition&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    fireball <span class="token operator">=</span> <span class="token function">instance_create_depth</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span>x<span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oFireball<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span>hspeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Wait until the fireball has risen above the player by 30 pixels</span>
    AWAIT fireball<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> fireball<span class="token punctuation">.</span>ystart <span class="token operator">-</span> <span class="token number">30</span> THEN
    
    <span class="token comment">//Then shoot the fireball at the nearest enemy!</span>
    nearest <span class="token operator">=</span> <span class="token function">instance_nearest</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span>x<span class="token punctuation">,</span> fireball<span class="token punctuation">.</span>ystart<span class="token punctuation">,</span> oEnemy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token function">point_direction</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span>x<span class="token punctuation">,</span> fireball<span class="token punctuation">.</span>y<span class="token punctuation">,</span> nearest<span class="token punctuation">.</span>x<span class="token punctuation">,</span> nearest<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT</code>是一个方便的行为，它在继续执行代码之前会检查其条件。如果条件返回 <code>true</code>，那么将立即继续执行。然而，如果条件返回 &quot;false&quot;，那么coroutine将暂时停止执行，直到下一帧（很像<code>YIELD...THEN</code>，尽管<code>AWAIT</code>将产生一个 &quot;undefined &quot;值）。</p><p><strong>请注意</strong>，当一个coroutine在等待<code>AWAIT</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回<code>true</code>。</p><p> </p><h4 id="await-first-coroutine-end" tabindex="-1"><a class="header-anchor" href="#await-first-coroutine-end"><span><code>AWAIT_FIRST &lt;coroutine&gt; ... END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    AWAIT_FIRST
        CO_BEGIN
            DELAY <span class="token number">200</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;First coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
        
        CO_BEGIN
            DELAY <span class="token number">100</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Second coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
    END
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Race finished (second coroutine should finish first)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_FIRST</code>允许父程序暂时停止执行，直到定义的子程序中的一个完成。一旦任何一个子程序完成执行，父程序的执行将继续；其余未完成的子程序将立即被取消。只有在<code>AWAIT_FIRST...END</code>块中定义的程序才会被考虑到这种行为，任何先前创建的子程序将被忽略，以达到<code>AWAIT_FIRST</code>逻辑的目的。</p><p>每个子程序都存在于它自己的范围内，因此每个子程序内的变量对该程序来说是唯一的。父级和子级程序不共享变量，子级程序之间也不共享变量。所有角逐程序将执行<code>CO_ON_COMPLETE</code>函数，无论该角逐程序是否是第一个结束的。</p><p><strong>请注意</strong>与普通的子程序不同，暂停或取消父程序将暂停或取消在<code>AWAIT_FIRST...END</code>块内创建的子程序。</p><p><strong>请注意</strong>当一个协程在<code>AWAIT_FIRST</code>命令下等待时，<code>.GetPaused()</code>方法<strong>不会</strong>返回<code>true</code>。</p><p> </p><h4 id="await-all-coroutine-end" tabindex="-1"><a class="header-anchor" href="#await-all-coroutine-end"><span><code>AWAIT_ALL &lt;coroutine&gt; ... END</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    AWAIT_ALL
        CO_BEGIN
            DELAY <span class="token number">200</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;First coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
        
        CO_BEGIN
            DELAY <span class="token number">100</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Second coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
    END
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Sync finished (both coroutines should have finished)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_ALL</code>允许一个父程序暂时停止执行，直到所有定义的子程序完成。一旦所有的子程序完成了执行，父程序的执行将继续进行。只有在<code>AWAIT_ALL...END</code>块内定义的程序才会被考虑，任何先前创建的子程序将被忽略，以用于<code>AWAIT_ALL</code>逻辑。</p><p>每个子程序都存在于它自己的范围内，因此每个子程序中的变量对该程序来说是唯一的。父类和子类程序不共享变量，子类程序之间也不共享变量。</p><p><strong>请注意</strong>与普通的子程序不同，暂停或取消父程序将暂停或取消在<code>AWAIT_ALL...END</code>块中创建的子程序。</p><p><strong>请注意</strong>，当一个协程在<code>AWAIT_ALL</code>命令下等待时，<code>.GetPaused()</code>方法将不会**返回\`true&#39;。</p><p> </p><h4 id="await-broadcast-name-then" tabindex="-1"><a class="header-anchor" href="#await-broadcast-name-then"><span><code>AWAIT_BROADCAST &lt;name&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token comment">//Rotate the door 30 degrees so it&#39;s ajar</span>
    WHILE image_angle <span class="token operator">&lt;</span> <span class="token number">30</span> THEN
        image_angle <span class="token operator">+=</span> <span class="token number">5</span>
        YIELD
    END
    
    <span class="token comment">//Wait for the player to push right...</span>
    AWAIT_BROADCAST <span class="token string">&quot;push right&quot;</span> THEN
    
    <span class="token comment">//...then open the door all the way!</span>
    WHILE image_angle <span class="token operator">&lt;=</span> <span class="token number">90</span> THEN
        image_angle <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> image_angle <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        YIELD
    END
CO_END

<span class="token comment">///Elsewhere in the player object...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">keyboard_check</span><span class="token punctuation">(</span>vk_right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CoroutineBroadcast</span><span class="token punctuation">(</span><span class="token string">&quot;push right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hspeed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_BROADCAST</code>是一个有用的命令，它允许间接的，对 coroutine 的控制。当coroutine遇到<code>AWAIT_BROADCAST</code>命令时，coroutine将在该命令处暂停。为了使该程序继续执行，必须使用与<code>AWAIT_BROADCAST</code>命令相同的名称调用<code>CoroutineBroadcast()</code>。然后，当<code>CoroutineEventHook()</code>在一个Step事件中被调用时（通常是在下一帧），该程序将继续执行。如果多个程序在等待同名的广播，只需要调用一次<code>CoroutineBroadcast()</code>就可以恢复所有这些程序。</p><p><strong>请注意</strong>，当一个协程在等待<code>AWAIT_BROADCAST</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回<code>true</code>。</p><p><code>AWAIT_BROADCAST</code>默认情况下，只响应本地Coroutines广播。要收听来自精灵和序列的GameMaker广播，请使用<code>AWAIT_ASYNC_BROADCAST</code>。</p><p> </p><p> </p><h3 id="异步事件" tabindex="-1"><a class="header-anchor" href="#异步事件"><span>异步事件</span></a></h3><h4 id="await-async-function-then" tabindex="-1"><a class="header-anchor" href="#await-async-function-then"><span><code>AWAIT_ASYNC_* &lt;function&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Starting leaderboard pull&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">steam_download_scores</span><span class="token punctuation">(</span><span class="token string">&quot;Game Scores&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    AWAIT_ASYNC_STEAM
        <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard request timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
           <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard data received&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            global<span class="token punctuation">.</span>scores <span class="token operator">=</span> <span class="token function">array_resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            var _list <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;entries&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            var _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">ds_list_size</span><span class="token punctuation">(</span>_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                var _data <span class="token operator">=</span> _list<span class="token punctuation">[</span><span class="token operator">|</span> _i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">array_push</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>scores<span class="token punctuation">,</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> _data<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> score <span class="token operator">:</span> _data<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;score&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rank <span class="token operator">:</span> _data<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;rank&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                _i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
    THEN
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard pull complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_ASYNC_*</code>命令（完整列表见下文）允许一个coroutine与GameMaker的本地异步事件系统进行交互。当coroutine遇到<code>AWAIT_ASYNC_*</code>命令时，coroutine将暂停该行代码并等待相关的异步事件被触发。一旦GameMaker的运行时出现正确类型的异步事件，<code>AWAIT_ASYNC_* ... THEN</code>的异步代码将被执行。如果该代码块调用了<code>ASYNC_COMPLETE</code>，那么coroutine立即执行进一步的代码，否则<code>AWAIT_ASYNC_*</code>继续监听新的事件。</p><p>位于<code>AWAIT_ASYNC_*</code>和<code>THEN</code>之间的标准GML函数在每次触发异步事件时都会被执行，而不管该异步事件是否与coroutine有关。这很不幸，但这也是GameMaker的设计方式。你应该总是检查你收到的<code>async_load</code>或<code>event_data</code> ds_map是否与你所期望的异步事件相匹配。</p><p><code>AWAIT_ASYNC_*</code>命令后面的代码不能包含任何coroutine宏（除了<code>ASYNC_COMPLETE</code>之外）。这是因为<code>async_load</code>和<code>event_data</code>可能包含易失性数据，在异步事件结束后不会持久。如果你想对异步事件返回的数据进行广泛的操作，你应该对其进行拷贝，然后在<code>AWAIT_ASYNC_*</code>代码块之外处理这些数据。</p><p><code>AWAIT_ASYNC_*</code>代码可以在一个操作超时时执行。默认情况下，没有设置超时时间，操作可能永远挂起。你可以使用<code>ASYNC_TIMEOUT</code>宏来定制超时时间（见下文）。当一个异步操作超时时，async_load是一个负数。你应该总是写代码来检查一个异步操作是否超时，也就是说，你应该总是处理<code>async_load</code>或<code>event_data</code>为负数的情况。</p><p>请注意，<code>AWAIT_ASYNC_BROADCAST</code>会专门接收GameMaker的精灵和序列广播；它不会接收Coroutines库中的广播（使用<code>AWAIT_BROADCAST</code>来代替）。此外，在<code>AWAIT_ASYNC_BROADCAST</code>代码块中，你应该检查<code>event_data</code>而不是<code>async_load</code>。</p><p>支持以下异步等待命令：</p><ul><li><code>AWAIT_ASYNC_HTTP</code></li><li><code>AWAIT_ASYNC_NETWORKING</code></li><li><code>AWAIT_ASYNC_SOCIAL</code></li><li><code>AWAIT_ASYNC_SAVE_LOAD</code></li><li><code>AWAIT_ASYNC_DIALOG</code></li><li><code>AWAIT_ASYNC_SYSTEM</code></li><li><code>AWAIT_ASYNC_STEAM</code></li><li><code>AWAIT_ASYNC_BROADCAST</code></li></ul>`,63)),s("p",null,[n[64]||(n[64]=a("这些是GameMaker中最常见的异步事件。如果你想添加更多的异步事件，那么请")),s("a",M,[n[63]||(n[63]=a("让我知道")),t(e)]),n[65]||(n[65]=a("，它们将被纳入正式发布。"))]),n[87]||(n[87]=o(`<p> </p><h4 id="async-complete" tabindex="-1"><a class="header-anchor" href="#async-complete"><span><code>ASYNC_COMPLETE</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    handle <span class="token operator">=</span> <span class="token function">get_string_async</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter your name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Juju Adams&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>    
    AWAIT_ASYNC_DIALOG
        <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result <span class="token operator">=</span> async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
    THEN
    
    RETURN result<span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ASYNC_COMPLETE</code>是<code>AWAIT_ASYNC_*</code>命令的一个重要组成部分。它表示异步操作已经完成，并且coroutine应该可以继续执行代码。如果你不在你的异步代码块中调用<code>ASYNC_COMPLETE</code>，那么异步操作可能会无限期地挂起。</p><p><strong>请注意</strong>，<code>ASYNC_COMPLETE</code>不应该在<code>AWAIT_ASYNC_*</code>代码块之外调用，否则你会看到不可预测的行为。</p><p> </p><h4 id="await-async-function-async-timeout-duration-then" tabindex="-1"><a class="header-anchor" href="#await-async-function-async-timeout-duration-then"><span><code>AWAIT_ASYNC_* &lt;function&gt; ASYNC_TIMEOUT &lt;duration&gt; THEN</code></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">http_get</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.jujuadams.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AWAIT_ASYNC_HTTP
        <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//Handle the timeout case</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET succeeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;result&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ASYNC_COMPLETE
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET failed with error code &quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>async_load<span class="token punctuation">[</span><span class="token operator">?</span> <span class="token string">&quot;http_status&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ASYNC_COMPLETE
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    ASYNC_TIMEOUT <span class="token number">6000</span> THEN <span class="token comment">//Wait 6 seconds before timing out (6000 milliseconds)</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步操作，特别是对服务器的操作，经常会遇到问题，请求超时。<code>ASYNC_TIMEOUT...THEN</code>为<code>AWAIT_ASYNC_*</code>命令增加了一个超时行为，以处理可能出现未报告失败的情况。默认情况下，<code>AWAIT_ASYNC_*</code>命令没有超时时间，操作有可能会永远挂起。超时持续时间（<code>ASYNC_TIMEOUT</code>和<code>THEN</code>之间的数字）是以毫秒为单位的。</p><p>当异步代码被执行但操作超时时，<code>async_load</code>将被设置为一个负数。你应该总是在你的<code>AWAIT_ASYNC_*</code>块中写入行为，以处理<code>async_load</code>为负数的情况，避免出现意外问题。</p>`,10))])}const B=p(u,[["render",Y],["__file","Coroutines.html.vue"]]),j=JSON.parse('{"path":"/blogs/2024/5/Coroutines.html","title":"【插件】协程","lang":"en-US","frontmatter":{"title":"【插件】协程","date":"2021/12/5","categories":["插件教程"]},"headers":[{"level":2,"title":"常见问题解答","slug":"常见问题解答","link":"#常见问题解答","children":[{"level":3,"title":"协程在哪些平台上有效？","slug":"协程在哪些平台上有效","link":"#协程在哪些平台上有效","children":[]},{"level":3,"title":"这个代码库的许可证是什么？我可以将它用于商业项目吗？","slug":"这个代码库的许可证是什么-我可以将它用于商业项目吗","link":"#这个代码库的许可证是什么-我可以将它用于商业项目吗","children":[]},{"level":3,"title":"我认为你缺少了一个有用的功能，希望你能实现它！","slug":"我认为你缺少了一个有用的功能-希望你能实现它","link":"#我认为你缺少了一个有用的功能-希望你能实现它","children":[]},{"level":3,"title":"我发现了一个bug，它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么？","slug":"我发现了一个bug-它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么","link":"#我发现了一个bug-它既让我害怕又略微烦恼。解决这个问题的最佳方法是什么","children":[]},{"level":3,"title":"救命！我在编译时遇到了关于异步事件的错误。","slug":"救命-我在编译时遇到了关于异步事件的错误。","link":"#救命-我在编译时遇到了关于异步事件的错误。","children":[]},{"level":3,"title":"协程与GMLive兼容吗？","slug":"协程与gmlive兼容吗","link":"#协程与gmlive兼容吗","children":[]},{"level":3,"title":"说到YellowAfterlife，他也通过GMEdit实现了协程。这个库有何不同？","slug":"说到yellowafterlife-他也通过gmedit实现了协程。这个库有何不同","link":"#说到yellowafterlife-他也通过gmedit实现了协程。这个库有何不同","children":[]},{"level":3,"title":"谁编写了代码？","slug":"谁编写了代码","link":"#谁编写了代码","children":[]},{"level":3,"title":"我可以向你捐款吗？你会开始一个Patreon吗？","slug":"我可以向你捐款吗-你会开始一个patreon吗","link":"#我可以向你捐款吗-你会开始一个patreon吗","children":[]}]},{"level":2,"title":"协程简介","slug":"协程简介","link":"#协程简介","children":[{"level":3,"title":"一个示例","slug":"一个示例","link":"#一个示例","children":[]}]},{"level":2,"title":"协程是如何执行的？","slug":"协程是如何执行的","link":"#协程是如何执行的","children":[{"level":3,"title":"执行","slug":"执行","link":"#执行","children":[]},{"level":3,"title":"生成","slug":"生成","link":"#生成","children":[]}]},{"level":2,"title":"我们如何扩展GML？","slug":"我们如何扩展gml","link":"#我们如何扩展gml","children":[{"level":3,"title":"宏的强大功能","slug":"宏的强大功能","link":"#宏的强大功能","children":[]},{"level":3,"title":"宏示例总结","slug":"宏示例总结","link":"#宏示例总结","children":[]}]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[{"level":3,"title":"COROUTINES_CHECK_SYNTAX","slug":"coroutines-check-syntax","link":"#coroutines-check-syntax","children":[]},{"level":3,"title":"COROUTINES_DELAY_REALTIME","slug":"coroutines-delay-realtime","link":"#coroutines-delay-realtime","children":[]},{"level":3,"title":"COROUTINES_DEFAULT_CANCEL_WHEN_ORPHANED","slug":"coroutines-default-cancel-when-orphaned","link":"#coroutines-default-cancel-when-orphaned","children":[]},{"level":3,"title":"COROUTINES_DEFAULT_CREATOR_WEAK_REFERENCE","slug":"coroutines-default-creator-weak-reference","link":"#coroutines-default-creator-weak-reference","children":[]},{"level":3,"title":"COROUTINES_GAMEMAKER_BROADCASTS_TRIGGER_NATIVE","slug":"coroutines-gamemaker-broadcasts-trigger-native","link":"#coroutines-gamemaker-broadcasts-trigger-native","children":[]}]},{"level":2,"title":"协程语法","slug":"协程语法","link":"#协程语法","children":[{"level":3,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":3,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"循环","slug":"循环","link":"#循环","children":[]},{"level":3,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"异步事件","slug":"异步事件","link":"#异步事件","children":[]}]}],"git":{"createdTime":1730622132000,"updatedTime":1730622132000,"contributors":[{"name":"Feafly","email":"jjcyf@foxmail.com","commits":1}]},"filePathRelative":"blogs/2024/5/Coroutines.md"}');export{B as comp,j as data};
