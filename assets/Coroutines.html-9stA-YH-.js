import{_ as o,r as c,o as p,c as i,a as n,b as s,d as e,e as t}from"./app-C8LbvSN3.js";const l={},u=n("p",null,"协程是由@jujuadams为GameMaker Studio 2.3.6及以上版本设计的一套在GML中异步执行代码的语法扩展",-1),d=n("hr",null,null,-1),r=n("p",null,[n("strong",null,"适用GM版本"),s(" : 2.3.6+")],-1),k=n("p",null,[n("strong",null,"适用目标平台"),s(" ：除HTML5之外的一切平台。")],-1),v=n("strong",null,"下载连接",-1),m={href:"https://github.com/JujuAdams/Coroutines/releases",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"常见问题解答",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常见问题解答"},[n("span",null,"常见问题解答")])],-1),g=n("h3",{id:"协程可以在哪些平台上运行",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#协程可以在哪些平台上运行"},[n("span",null,"协程可以在哪些平台上运行？")])],-1),h={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"此代码库的许可证是什么-我可以将其用于商业项目吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#此代码库的许可证是什么-我可以将其用于商业项目吗"},[n("span",null,"此代码库的许可证是什么？我可以将其用于商业项目吗？")])],-1),E={href:"https://github.com/JujuAdams/Coroutines/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},A=n("h3",{id:"我认为您缺少一个有用的功能-我希望您实现它",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#我认为您缺少一个有用的功能-我希望您实现它"},[n("span",null,"我认为您缺少一个有用的功能，我希望您实现它！")])],-1),T={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},N=n("h3",{id:"我发现了一个错误-解决问题的最佳方法是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#我发现了一个错误-解决问题的最佳方法是什么"},[n("span",null,"我发现了一个错误，解决问题的最佳方法是什么？")])],-1),C={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},f={href:"https://discord.gg/8krYCqr",target:"_blank",rel:"noopener noreferrer"},O=n("h3",{id:"帮我-我收到有关异步事件的编译错误。",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#帮我-我收到有关异步事件的编译错误。"},[n("span",null,"帮我！我收到有关异步事件的编译错误。")])],-1),I=n("p",null,"由于 GMS2.3.6 更改了一些与异步事件相关的常量名称，低于 v2.3.6 的 GameMaker 版本将不可以编译此库。您可以通过在 GM 的文档中找到旧名称并将其插入自己的项目来解决此问题。",-1),S={id:"协程是否适用于gmlive",tabindex:"-1"},R={class:"header-anchor",href:"#协程是否适用于gmlive"},x={href:"https://yellowafterlife.itch.io/gamemaker-live",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"我不知道。",-1),q=n("h3",{id:"说到gmlive-其作者还通过gmedit实现了协程。这个库有什么不同",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#说到gmlive-其作者还通过gmedit实现了协程。这个库有什么不同"},[n("span",null,"说到GMLive，其作者还通过GMEdit实现了协程。这个库有什么不同？")])],-1),D=n("p",null,"Vadim早在GameMaker Studio 2.3将匿名函数引入GML之前就编写了他的协程实现。这是一个非常聪明的技术解决方案，可以解决旧版GM中许多缺失的功能。 幸运的是，GameMaker现在更加灵活，这个库主要利用了新功能来实现协程。",-1),H=n("h3",{id:"谁写的代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#谁写的代码"},[n("span",null,"谁写的代码？")])],-1),y={href:"https://twitter.com/jujuadams",target:"_blank",rel:"noopener noreferrer"},G={href:"http://www.jujuadams.com/",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="我可以给你捐款吗" tabindex="-1"><a class="header-anchor" href="#我可以给你捐款吗"><span>我可以给你捐款吗？</span></a></h3><p>谢谢你想表达你的感激之情，这对我个人来说确实意义重大——但我很幸运的能从Gamedev中获得稳定的收入。如果你想支持我的工作，请在你的游戏里给我一个名字就够了。</p><h2 id="协程简介" tabindex="-1"><a class="header-anchor" href="#协程简介"><span>协程简介</span></a></h2><p>当你写代码并运行你的游戏时，你写的代码是按顺序执行的，一个命令在前一个命令完成后立即执行。我们将代码存储在函数中，目的是让程序从一个函数进入下一个函数，使游戏运行。当程序进入一个函数时，它必须完成整个函数（或至少到 <code>return</code> 命令为止），然后程序才能退出函数并运行其他代码。这被称为“同步执行”，这就是GameMaker的工作方式——代码是同步运行的，一行接一行，每帧数千行代码分布在数百个函数中。</p><p>异步函数的操作方式则不同。异步函数<strong>不需要</strong>完全完成所有的代码，程序就可以离开该函数，做其他事情，关键是，异步函数可以从他们离开的地方恢复，从他们暂停的地方恢复执行。这意味着你可以写一些代码在它的中间，以允许总体程序去做其他事情，并在稍后返回到该函数。</p><p>这个库允许你在GameMaker中编写可暂停的函数。这些可暂停的函数被称为 &quot;coroutines&quot;：一个代码块，可以在执行过程中暂停，稍后再继续。</p><p>许多语言原生支持编写异步代码，要么是作为核心语言功能，要么是实现异步执行的库。GML则是后者。因此，我们有必要开发自己的系统，以模拟那些支持异步函数的语言的特征和行为。从纯函数中构建corountines是笨拙的，难以遵循的，所以这个库扩展了GML的语法，这样我们就可以用更优雅的方式来描述coroutines。</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>让我们看一个简单的例子：过场动画。</p><p>场景动画是一场噩梦，多年来人们花了很多精力为场景问题设计和建立不同的解决方案。最常见的解决方案是使用一个大的switch...case语句来控制什么实例做什么，什么时候做。构建这些系统是非常耗时的，而且它们最后总是很难看，不实用。在现实中，我们想要的切入函数是一个异步函数——一个可暂停的函数，它可以向游戏传递指令，使物体产生动画并显示文本，而该函数不会阻止游戏的其余部分运行。</p><p>下面是一个场景动画的例子。我们将在后面详细介绍正在发生的事情，但这应该能让你体会到用协程可以实现什么样的事情。</p><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>function <span class="token function">CutsceneFindMyFroggy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> CO_BEGIN
		<span class="token comment">//阻止玩家使用正常的控制手段进行移动</span>
		oPlayer<span class="token punctuation">.</span>inCutscene <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		
		<span class="token comment">//让玩家走进房间</span>
		WHILE <span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">!=</span> <span class="token number">55</span><span class="token punctuation">)</span> THEN
			oPlayer<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			YIELD THEN
		END
		
		<span class="token comment">//显示一些对话</span>
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;我的青蛙在哪里?&quot;</span><span class="token punctuation">;</span>
		oTextbox<span class="token punctuation">.</span>expression <span class="token operator">=</span> sPlayerSad<span class="token punctuation">;</span>
		AWAIT <span class="token function">keyboard_check_pressed</span><span class="token punctuation">(</span><span class="token constant">vk_space</span><span class="token punctuation">)</span> THEN
		
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>
		
		<span class="token comment">//为达到喜剧效果而短暂停顿片刻</span>
		DELAY <span class="token number">350</span> THEN <span class="token comment">//毫秒</span>
		
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;Ribbit!&quot;</span><span class="token punctuation">;</span>
		oTextbox<span class="token punctuation">.</span>expression <span class="token operator">=</span> sFrog<span class="token punctuation">;</span>
		<span class="token function">audio_play_sound</span><span class="token punctuation">(</span>sndLonelyRibbit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">//让青蛙跳到玩家的怀里</span>
		WHILE <span class="token punctuation">(</span>oFrog<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">!=</span> <span class="token number">55</span><span class="token punctuation">)</span> THEN
			oFrog<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>oFrog<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			YIELD THEN
		END
		
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;啊，她来了！我美丽的两栖动物?&quot;</span><span class="token punctuation">;</span>
		oTextbox<span class="token punctuation">.</span>expression <span class="token operator">=</span> sPlayerHappy<span class="token punctuation">;</span>
		AWAIT <span class="token function">keyboard_check_pressed</span><span class="token punctuation">(</span><span class="token constant">vk_space</span><span class="token punctuation">)</span> THEN
		
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;Ribbit! :)&quot;</span><span class="token punctuation">;</span>
		oTextbox<span class="token punctuation">.</span>expression <span class="token operator">=</span> sFrog<span class="token punctuation">;</span>
		<span class="token function">audio_play_sound</span><span class="token punctuation">(</span>sndHappyRibbit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		AWAIT <span class="token function">keyboard_check_pressed</span><span class="token punctuation">(</span><span class="token constant">vk_space</span><span class="token punctuation">)</span> THEN
		
		<span class="token comment">//清空文本框，然后释放玩家</span>
		oTextbox<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
		player<span class="token punctuation">.</span>inCutscene <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	CO_END
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种语法与普通的GML有些不同。特别值得注意的是，它使用了新的流程控制关键字。毫无疑问，<code>WHILE</code>你已经见过了（尽管是小写的<code>while</code>循环命令），而许多其他的命令是新的或不熟悉的。</p><p><code>CO_BEGIN</code>和<code>CO_END</code>定义了循环程序的开始和结束点。这两个标记之间的一切都构成了协程的代码。普通的GML可以在整个协程中使用，比如修改其他实例中的变量，但是为了实现协程的特定行为，必须使用特殊的协程语法。<code>THEN</code>和<code>END</code>是结构性命令，在使用上类似于打开<code>{</code>和关闭<code>}</code>的大括号。</p><p><code>AWAIT</code>和<code>DELAY</code>是为了方便而提供的命令。<code>AWAIT</code>将暂停该行代码的循环程序，直到条件返回<code>true</code>。在上面的例子中，我们在等待用户按下空格键，然后再推进到后面的指令。<code>DELAY</code>将等待一定的时间后再继续进行（以毫秒为单位）。</p><p>最后，我们有一个不寻常的命令<code>YIELD</code>。这个功能是循环程序的核心。当一个协程碰到<code>YIELD</code>命令时，它会立即跳出协程，允许你的游戏执行其他指令。在下一步中，该程序将从<code>YIELD</code>命令中恢复，继续执行代码。</p><p>让剪辑变得更容易处理只是一个开始：协程可用于UI动画、复杂的网络协议、REST API和OAuth流程、多阶段视觉效果、异步保存/加载（控制台开发需要），还有更多。它们是非常有用的，现在它们在GameMaker中出现了。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p><code>__CoroutinesConfig()</code>是一个包含少量宏的脚本，可以用来定制协程库的全局行为。如果你想改变库的默认行为，你应该编辑这些宏。</p><h3 id="coroutines-check-syntax" tabindex="-1"><a class="header-anchor" href="#coroutines-check-syntax"><span><code>COROUTINES_CHECK_SYNTAX</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>是否对协程进行运行时语法检查。这在启动协程时有性能上的损失，但在执行协程时没有。此外，语法检查是一个实验性的功能。如果你发现语法检查器没有帮助的话，它可能会抛出假的结果。</p>`,22),M={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,[s("将此宏设置为 "),n("code",null,"false")],-1),P=t(`<p>此外，运行时语法检查在创建一个协程程序时有一点小的性能损失。如果你觉得你需要更多的速度，你可能想把这个宏设置为&quot;false&quot;来回收一点CPU时间。</p><h3 id="coroutines-delay-realtime" tabindex="-1"><a class="header-anchor" href="#coroutines-delay-realtime"><span><code>COROUTINES_DELAY_REALTIME</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>将此宏设置为<code>true</code>，以测量<code>DELAY</code>命令的持续时间，单位为毫秒。如果你需要每一帧的准确性，那么将这个宏设置为<code>false</code>。</p><h3 id="coroutines-default-cancel-when-orphaned" tabindex="-1"><a class="header-anchor" href="#coroutines-default-cancel-when-orphaned"><span><code>COROUTINES_DEFAULT_CANCEL_WHEN_ORPHANED</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>当协程的主体被销毁或被垃圾回收时，取消轮子的行为。一个特定的程序在成为孤儿时是否被取消，也可以用<code>.CancelWhenOrphaned()</code>方法来控制。</p><p><strong>注意：</strong> 一个停用的实例算作一个不存在的实例。</p><h3 id="coroutines-default-creator-weak-reference" tabindex="-1"><a class="header-anchor" href="#coroutines-default-creator-weak-reference"><span><code>COROUTINES_DEFAULT_CREATOR_WEAK_REFERENCE</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>这个宏与上面那个宏有关。如果你在一个结构的范围内创建一个coroutine，coroutine需要保持对该结构的引用，以便<code>.GetCreator()</code>方法能够返回一个值。如果你期望（或打算）该结构在某一时刻被垃圾回收，这将导致一个问题，因为如果coroutine持有一个强引用，coroutine将保持该结构的活力。将此宏设置为&quot;true &quot;将默认每个结构的引用为弱引用，以避免这一问题。可以使用<code>.WeakReference()</code>方法来进一步调整单个coroutine持有的引用类型。</p><h3 id="coroutines-gamemaker-broadcasts-trigger-native" tabindex="-1"><a class="header-anchor" href="#coroutines-gamemaker-broadcasts-trigger-native"><span><code>COROUTINES_GAMEMAKER_BROADCASTS_TRIGGER_NATIVE</code></span></a></h3><p><strong>预期值:</strong> Boolean, <code>true</code> or <code>false</code></p><p>Coroutines有它自己的本地广播系统。广播可以用<code>CoroutineBroadcast()</code>函数进行，监听器可以用<code>AWAIT_BROADCAST</code>设置。GameMaker有自己的广播系统，精灵和序列可以发射事件。GameMaker的广播可以被Coroutine使用<code>AWAIT_ASYNC_BROADCAST</code>接收，并且GameMaker的全局变量<code>event_data</code>将被访问，正如你所期望的那样。Coroutine的广播和GameMaker的广播是两个不同的系统，通常不会相互影响。</p><p>有时能够使用<code>AWAIT_BROADCAST</code>来接收GameMaker的广播是很有用的。将这个宏设置为<code>true</code>将允许GameMaker广播触发本地Coroutine广播监听器。然而，如果GameMaker广播触发了一个本地监听器，那么<code>event_data</code>将不能被访问。将此宏设置为 &quot;true &quot;不会禁用 <code>AWAIT_ASYNC_BROADCAST</code>，所以要注意不要混淆行为。</p><h2 id="协程语法" tabindex="-1"><a class="header-anchor" href="#协程语法"><span>协程语法</span></a></h2><p>以下是用于定义coroutine的有效命令宏。请记住，每个cououtine命令宏之间的代码都在独立的GML函数中。这些函数在同一范围内执行（coroutine根结构），但由于在不同的函数中，它们不能共享局部变量（&quot;var&quot;变量）。</p><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h3><h4 id="co-begin-和-co-end" tabindex="-1"><a class="header-anchor" href="#co-begin-和-co-end"><span><code>CO_BEGIN</code> 和 <code>CO_END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_BEGIN</code>和<code>CO_END</code>被要求放在所有Coroutine代码的括号内。COROUTINE命令必须放在这两条命令中才有效（否则你可能会遇到致命的编译错误）。<code>CO_BEGIN</code>为创建的coroutine实例返回一个coroutine根结构。如果你想从coroutine中读取数值或使用方法控制其执行，那么你将需要保持对coroutine根结构的引用。</p><p>创建一个程序将自动把它添加到一个全局的程序列表中，以便每一帧都被执行。一旦该程序完成，它将被从全局执行中移除，并可用于内存回收。当然，如果你在该程序完成后还保持着对该程序的引用，那么在你持有的引用也被丢弃之前，它将不会被垃圾回收。</p><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example parent coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    CO_BEGIN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This is an example child coroutine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CO_END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Coroutine定义可以相互嵌套，因此一个coroutine父级可以创建额外的coroutine子级。在一个父下创建的子将继续执行，无论父是否被暂停、取消或以其他方式进行交互。每个子程序都存在于它自己的范围内，因此每个子程序内的变量对该程序来说是唯一的。父和子不共享变量，子代程序之间也不共享变量。</p><p>子程序不会阻止父程序的执行——如果你想让子程序阻止其父程序的执行，请使用<code>RACE</code>或<code>SYNC</code>命令（或者使用<code>AWAIT</code>创建你自己的功能）。</p><h4 id="then" tabindex="-1"><a class="header-anchor" href="#then"><span><code>THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This will&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;be displayed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;in the&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;same frame&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>THEN</code>本身没有特别的意义，如果在没有上下文的情况下使用，只是将代码块附加到前面的代码块的末尾。然而，<code>THEN</code>在许多地方是必需的语法，应该按照这些命令的指示来使用。</p><h4 id="co-params-variable" tabindex="-1"><a class="header-anchor" href="#co-params-variable"><span><code>CO_PARAMS.&lt;variable&gt;</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>function <span class="token function">ShowPopUpMessageTwice</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CO_PARAMS<span class="token punctuation">.</span>message <span class="token operator">=</span> _message<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> CO_BEGIN
        <span class="token function">show_message</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DELAY <span class="token number">1000</span> THEN
        <span class="token function">show_message</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CO_END
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_PARAMS</code>允许你在定义程序之前在程序中设置变量。如果你的coroutine位于一个启动新coroutine的函数内，这对传递参数很有帮助。</p><h4 id="co-on-complete" tabindex="-1"><a class="header-anchor" href="#co-on-complete"><span><code>CO_ON_COMPLETE</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    list <span class="token operator">=</span> <span class="token function">ds_list_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_ON_COMPLETE
    <span class="token comment">//Clean up the list to avoid a memory leak</span>
    <span class="token function">ds_list_destroy</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_ON_COMPLETE</code>增加了额外的、最终的代码，当它完成时，将由coroutine执行。<code>CO_ON_COMPLETE</code>在调用<code>.Restart()</code>方法时也将被执行。</p><p><strong>请注意</strong>，<code>CO_ON_COMPLETE</code>代码的内容必须是简单的GML。这意味着你不能在代码块内使用coroutine命令。</p><h4 id="co-scope-struct-instance" tabindex="-1"><a class="header-anchor" href="#co-scope-struct-instance"><span><code>CO_SCOPE = &lt;struct/instance&gt;</code></span></a></h4><p><strong>这是为方便而提供的高级功能，在使用时不应不加注意。</strong></p><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code><span class="token comment">////Create Event of an object</span>
<span class="token comment">//Set the scope of the next coroutine to ourselves (CO_SCOPE is reset by CO_END)</span>
CO_SCOPE <span class="token operator">=</span> <span class="token constant">self</span><span class="token punctuation">;</span>
<span class="token comment">//Start </span>
CO_BEGIN
    WHILE <span class="token boolean">true</span> THEN <span class="token comment">//Repeat forever!</span>
        <span class="token comment">//Randomize our position and angle</span>
        <span class="token variable">image_angle</span> <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">x</span> <span class="token operator">=</span> <span class="token variable">xprevious</span> <span class="token operator">+</span> <span class="token function">random_range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">y</span> <span class="token operator">=</span> <span class="token variable">yprevious</span> <span class="token operator">+</span> <span class="token function">random_Range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Wait 120ms before doing this again</span>
        DELAY <span class="token number">120</span> THEN
    END
CO_END
<span class="token comment">////Draw Event</span>
<span class="token function">draw_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时不时地，让一个coroutine直接与一个实例（或结构）的状态进行交互是很有用的。<code>CO_PARAMS</code>和<code>.GetCreator()</code>是为了帮助coroutine和游戏中的其他数据容器之间顺利互动而提供的，但在特定范围内调用代码可能是有利的。</p><p>当一个协程被生成时，每个命令之间的所有代码被收集在一个本地GameMaker函数中。这个函数的范围，默认情况下，被强制为根coroutine结构。这确保了实例变量总是在一个隔离的环境中被创建和修改。虽然这比其他方法要安全得多，但也会有不便之处。<code>CO_SCOPE</code>覆盖了默认的行为（范围为coroutine结构），这样函数的范围为你选择的实例或结构。</p><p>然而，coroutine结构仍然被生成，并将作为调用coroutine方法的端点而存在。所有的程序方法仍然可以通过直接引用由<code>CO_BEGIN</code>返回的程序结构来访问。</p><p><code>CO_SCOPE</code>适用于下一个程序定义，并且只适用于下一个定义。当<code>CO_END</code>被调用时，<code>CO_SCOPE</code>将被重置为默认行为（范围为根冠状结构）。在这方面，<code>CO_SCOPE</code>类似于<code>CO_PARAMS</code>。</p><p><strong>请注意</strong>，通过使用<code>CO_SCOPE</code>，很容易产生冲突，即两个coroutine争相为一个实例设置相同的值。这可能会导致令人不快和棘手的bug的修复。<strong>使用该功能的风险由你自己承担</strong>。</p><h4 id="co-local-variable" tabindex="-1"><a class="header-anchor" href="#co-local-variable"><span><code>CO_LOCAL.&lt;variable&gt;</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>CO_PARAMS<span class="token punctuation">.</span>cells_to_travel <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
CO_SCOPE <span class="token operator">=</span> <span class="token constant">self</span><span class="token punctuation">;</span>
CO_BEGIN
    CO_LOCAL<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//Use a coroutine variable to count how many times we&#39;ve moved</span>
    WHILE CO_LOCAL<span class="token punctuation">.</span>i <span class="token operator">&lt;</span> CO_LOCAL<span class="token punctuation">.</span>cells_to_travel THEN
	    
        <span class="token comment">//Move down the grid, 32px at a time</span>
        <span class="token variable">y</span> <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span> 
        
        <span class="token comment">//Change our sprite</span>
        <span class="token constant">sprite_index</span> <span class="token operator">=</span> <span class="token constant">sprMoveDown</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Wait 90ms before doing this again</span>
        DELAY <span class="token number">90</span> THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CO_LOCAL</code>包含一个对当前正在处理的循环程序的引用。默认情况下，<code>CO_LOCAL</code>将是coroutine代码块内部的<code>self</code>作用域。如果你使用<code>CO_SCOPE</code>（见上文），情况就会改变，因为现在的coroutine代码块是在其他实例/结构的范围内运行。为了能够引用由coroutine根结构持有的沙盒变量，需要<code>CO_LOCAL</code>。</p><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h3><h4 id="yield-expression-then" tabindex="-1"><a class="header-anchor" href="#yield-expression-then"><span><code>YIELD &lt;expression&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;This will&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;be displayed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;over several&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    YIELD THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;different frames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    REPEAT <span class="token number">5</span> THEN
        YIELD i THEN <span class="token comment">//Yield the values 1, 2, 4, 8, 16 over 5 frames</span>
        i <span class="token operator">*=</span> <span class="token number">2</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>YIELD</code>指示协程程序暂时停止执行协程程序并返回一个值。与<code>PAUSE...THEN</code>或<code>RETURN</code>不同，执行将在下一帧恢复，不需要任何其他动作。由<code>YIELD</code>发出的值可以使用<code>.Get()</code>方法从coroutine中读取。如果在<code>YIELD</code>和<code>THEN</code>之间没有指定值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>YIELD</code>命令后面必须有<code>THEN</code>命令。如果你忘记了<code>THEN</code>命令，那么代码将神秘地不能运行，并且会出现&quot;跳过&quot;。</p><h4 id="pause-expression-then" tabindex="-1"><a class="header-anchor" href="#pause-expression-then"><span><code>PAUSE &lt;expression&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;left&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;right&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Look left again&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PAUSE <span class="token string">&quot;left&quot;</span> THEN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Then cross the road&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PAUSE</code>指示coroutine立即暂停执行并返回一个值。这与<code>YIELD</code>的行为类似，但与<code>YIELD</code>不同的是，一个暂停的coroutine<strong>不会</strong>在下一帧恢复执行。你将需要调用<code>.Resume()</code>方法来恢复暂停的 coroutine 的执行。由<code>PAUSE</code>发出的值可以使用<code>.Get()</code>方法从该协程程序中读取。如果在<code>PAUSE</code>和<code>THEN</code>之间没有指定值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>PAUSE</code>命令后面必须有<code>THEN</code>命令。如果你忘记了<code>THEN</code>命令，那么代码将神秘地不能运行，并出现&quot;跳过&quot;。</p><h4 id="return-expression" tabindex="-1"><a class="header-anchor" href="#return-expression"><span><code>RETURN &lt;expression&gt;</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    IF oPlayer<span class="token punctuation">.</span><span class="token variable">x</span> <span class="token operator">&gt;</span> <span class="token number">55</span> THEN
        RETURN <span class="token string">&quot;Too far right&quot;</span>
    ELSE
        <span class="token function">CutsceneFindMyFroggy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RETURN <span class="token string">&quot;Playing cutscene&quot;</span>
    END_IF
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RETURN</code>指示coroutine立即完成执行并返回给定值。与<code>YIELD</code>或<code>PAUSE</code>不同的是，该程序的执行被完全停止（尽管该程序可以通过<code>.Restart()</code>方法重新启动）。由<code>RETURN</code>发出的值可以用<code>.Get()</code>方法从该协程程序中读取。如果在<code>RETURN</code>后没有指定任何值，那么<code>.Get()</code>将返回<code>undefined</code>。</p><p><strong>请注意</strong>，<code>RETURN</code>命令后面不需要有<code>THEN</code>命令。任何写在<code>RETURN</code>命令后面的东西当然不会被执行，就像GML的本地<code>return</code>命令。</p><h4 id="restart" tabindex="-1"><a class="header-anchor" href="#restart"><span><code>RESTART</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">CreateSmokeParticle</span><span class="token punctuation">(</span>oChimney<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> oChimney<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DELAY <span class="token function">random_range</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span> THEN
    RESTART
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RESTART</code>指示异步协程产生，然后在下一个异步协程框架中，restart执行。如果调用coroutine结构上的<code>.Get()</code>方法，一个被重新启动的coroutine将返回<code>undefined</code>。通过将<code>RESTART</code>放在一个循环程序的末尾，你可以让一个循环程序无休止地循环，直到被cancel。<code>CO_ON_COMPLETE</code>将在重新启动一个循环程序时被调用。</p><p><strong>请注意，循环程序中的变量不会被重置。</strong></p><p><strong>请注意</strong>，<code>RESTART</code>命令后面不需要有<code>THEN</code>命令。任何写在<code>RESTART</code>命令后面的东西都不会被执行，就像GML的本地<code>return</code>命令。</p><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><h4 id="end" tabindex="-1"><a class="header-anchor" href="#end"><span><code>END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它本身没有任何作用。然而，<code>END</code>对于终止<code>REPEAT</code>、<code>WHILE</code>或<code>FOREACH</code>循环是必要的。它也应该被用来终止<code>RACE</code>或<code>SYNC</code>块。在其他情况下，不能使用它。</p><h4 id="repeat-expression-then-function-end" tabindex="-1"><a class="header-anchor" href="#repeat-expression-then-function-end"><span><code>REPEAT &lt;expression&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    REPEAT <span class="token number">5</span> THEN
        <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Five messages!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>repeat()</code>循环。没有必要在<strong>所有的情况</strong>下使用这个宏来取代标准的<code>repeat()</code>循环。只有当<code>repeat()</code>循环包含一个coroutine命令时，才<strong>需要</strong>使用<code>REPEAT...END</code>循环。</p><h4 id="while-condition-then-function-end" tabindex="-1"><a class="header-anchor" href="#while-condition-then-function-end"><span><code>WHILE &lt;condition&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    fireball <span class="token operator">=</span> <span class="token function">instance_create_depth</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oFireball<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Wait until the fireball has risen above the player by 30 pixels</span>
    WHILE fireball<span class="token punctuation">.</span><span class="token variable">y</span> <span class="token operator">&lt;=</span> fireball<span class="token punctuation">.</span><span class="token variable">ystart</span> <span class="token operator">-</span> <span class="token number">30</span> THEN
        fireball<span class="token punctuation">.</span><span class="token variable">y</span> <span class="token operator">-=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        YIELD THEN
    END
    
    <span class="token comment">//Then shoot the fireball at the nearest enemy!</span>
    nearest <span class="token operator">=</span> <span class="token function">instance_nearest</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> fireball<span class="token punctuation">.</span><span class="token variable">ystart</span><span class="token punctuation">,</span> oEnemy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span><span class="token variable">direction</span> <span class="token operator">=</span> <span class="token function">point_direction</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> fireball<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">,</span> nearest<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> nearest<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span><span class="token variable">speed</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WHILE</code>类似于GameMaker自己的<code>while()</code>循环。没有必要在<strong>所有的情况</strong>下使用这个宏来取代标准的<code>while()</code>循环。只有当<code>while()</code>循环包含一个coroutine命令时，才<strong>需要</strong>使用<code>WHILE...END</code>循环。</p><h4 id="foreach-iteratorvariable-in-iterabledata-then-function-end" tabindex="-1"><a class="header-anchor" href="#foreach-iteratorvariable-in-iterabledata-then-function-end"><span><code>FOREACH &lt;iteratorVariable&gt; IN &lt;iterableData&gt; THEN &lt;function&gt; END</code></span></a></h4><div class="language-GML line-numbers-mode" data-ext="GML" data-title="GML"><pre class="language-GML"><code>coroutineRootStruct = CO_BEGIN
    highestHP = 0;
    highestInstance = noone;
    
    //Find the enemy from our array with the highest HP
    FOREACH instance IN global.arrayOfEnemies THEN
        if (instance.hp &gt; highestHP)
        {
            highestHP = instance.hp;
            highestInstance = instance;
        }
    END
    
    //Bash them!
    if (instance_exists(lowestInstance)) hp -= 100;
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FOREACH...THEN</code>循环是一个方便的功能，它在以下两种情况下进行迭代</p><ol><li>一个数组。</li><li>一个结构。</li><li>一个对象的实例。</li><li>或从一个循环程序输出的\`YIELD&#39;。</li></ol>`,80),W={href:"https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get_names.htm",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"variable_struct_get_names()",-1),F=t(`<p>当迭代对象的实例时，迭代器变量被赋予实例引用（实例的结构表示，例如，在实例的范围内调用\`self&#39;得到的）。<strong>请注意</strong>，&quot;FOREACH &quot;循环的行为与GameMaker的本地 &quot;with() &quot;循环不同：&quot;FOREACH &quot;循环中的代码范围不会改变。</p><p>当迭代一个循环的输出时，<code>YIELD</code>值被分配给迭代器变量。<code>FOREACH...THEN</code>循环将在可迭代的循环程序完成时终止。</p><p><strong>请注意</strong>不要修改你正在迭代的数组或结构。当<code>FOREACH...THEN</code>循环开始时，迭代的总数被计算出来，如果数组或结构的大小发生变化，则可能导致崩溃和其他错误。</p><h4 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span><code>BREAK</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    healthRemaining <span class="token operator">=</span> oPlayer<span class="token punctuation">.</span>hp<span class="token punctuation">;</span>
    FOREACH heart IN <span class="token constant">global</span><span class="token punctuation">.</span>heartInstances THEN
        heart<span class="token punctuation">.</span><span class="token constant">sprite_index</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> healthRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
        healthRemaining <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>healthRemaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> BREAK<span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>break</code>命令。立即脱离<code>REPEAT...THEN</code>、<code>WHILE...THEN</code>或<code>FOREACH...THEN</code>循环，不执行循环中的其他代码。循环中的其余代码将正常执行。</p><p><strong>请注意</strong>，标准的GML <code>break</code> 命令不会在coroutine循环中发挥作用。</p><h4 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span><code>CONTINUE</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    FOREACH enemy IN <span class="token constant">objEnemy</span> THEN
        IF <span class="token function">point_distance</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">,</span> enemy<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> enemy<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span> THEN
            CONTINUE
        END_IF
        
        enemy<span class="token punctuation">.</span><span class="token variable">vspeed</span> <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>continue</code>命令。强制执行一个循环（无论是 <code>REPEAT...THEN</code>，<code>WHILE...THEN</code>，还是 <code>FOREACH...THEN</code> 循环），立即进入下一个迭代，而不执行循环中的其他代码。</p><p><strong>请注意</strong>，标准的GML<code>continue</code>命令在coroutine循环中不起作用。</p><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h3><h4 id="if-condition-then-function-end-if-and-else-and-else-if" tabindex="-1"><a class="header-anchor" href="#if-condition-then-function-end-if-and-else-and-else-if"><span><code>IF &lt;condition&gt; THEN &lt;function&gt; END_IF</code> (and <code>ELSE</code> and <code>ELSE_IF</code>)</span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    healthRemaining <span class="token operator">=</span> oPlayer<span class="token punctuation">.</span>hp<span class="token punctuation">;</span>
    
    FOREACH heart IN <span class="token constant">global</span><span class="token punctuation">.</span>heartInstances THEN
        heart<span class="token punctuation">.</span><span class="token constant">sprite_index</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> healthRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
        healthRemaining <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        
        IF <span class="token punctuation">(</span>healthRemaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> THEN
            BREAK<span class="token punctuation">;</span>
        END_IF
        
        YIELD THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于GameMaker自己的<code>if</code>和<code>else</code>命令。一个IF必须由一个<code>END_IF</code>来匹配。通常不需要使用这些特定的命令。如果if-else（或else-else等）本身包含一个coroutine命令，你应该使用这些宏，但<code>ASYNC_COMPLETE</code>除外。<code>ELSE</code>和<code>ELSE_IF</code>也被支持。</p><p><strong>请注意</strong>，<code>ELSE IF</code>是不正确的语法，会导致编译错误，请确保使用<code>ELSE_IF</code>。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><h4 id="delay-expression-then" tabindex="-1"><a class="header-anchor" href="#delay-expression-then"><span><code>DELAY &lt;expression&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    WHILE <span class="token function">instance_exists</span><span class="token punctuation">(</span>oRainbow<span class="token punctuation">)</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_red</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_orange</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_yellow</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_lime</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_aqua</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
        oRainbow<span class="token punctuation">.</span><span class="token variable">image_blend</span> <span class="token operator">=</span> <span class="token constant">c_purple</span><span class="token punctuation">;</span>
        DELAY <span class="token number">500</span> THEN
    END
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DELAY</code>是一个方便的行为，它将暂停一个循环程序的实际时间量。延迟的时间是以毫秒为单位的；一秒钟是1000毫秒，在60FPS下，一个单帧是（大约）16.66ms。</p><p><strong>请注意</strong>，当一个程序在等待<code>DELAY</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回&quot;true&quot;。</p><h4 id="await-condition-then" tabindex="-1"><a class="header-anchor" href="#await-condition-then"><span><code>AWAIT &lt;condition&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    fireball <span class="token operator">=</span> <span class="token function">instance_create_depth</span><span class="token punctuation">(</span>oPlayer<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> oPlayer<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oFireball<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span><span class="token variable">hspeed</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Wait until the fireball has risen above the player by 30 pixels</span>
    AWAIT fireball<span class="token punctuation">.</span><span class="token variable">y</span> <span class="token operator">&lt;=</span> fireball<span class="token punctuation">.</span><span class="token variable">ystart</span> <span class="token operator">-</span> <span class="token number">30</span> THEN
    
    <span class="token comment">//Then shoot the fireball at the nearest enemy!</span>
    nearest <span class="token operator">=</span> <span class="token function">instance_nearest</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> fireball<span class="token punctuation">.</span><span class="token variable">ystart</span><span class="token punctuation">,</span> oEnemy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span><span class="token variable">direction</span> <span class="token operator">=</span> <span class="token function">point_direction</span><span class="token punctuation">(</span>fireball<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> fireball<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">,</span> nearest<span class="token punctuation">.</span><span class="token variable">x</span><span class="token punctuation">,</span> nearest<span class="token punctuation">.</span><span class="token variable">y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fireball<span class="token punctuation">.</span><span class="token variable">speed</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT</code>是一个方便的行为，它在继续执行代码之前会检查其条件。如果条件返回 <code>true</code>，那么将立即继续执行。然而，如果条件返回 &quot;false&quot;，那么coroutine将暂时停止执行，直到下一帧（很像<code>YIELD...THEN</code>，尽管<code>AWAIT</code>将产生一个 &quot;undefined &quot;值）。</p><p><strong>请注意</strong>，当一个coroutine在等待<code>AWAIT</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回<code>true</code>。</p><h4 id="await-first-coroutine-end" tabindex="-1"><a class="header-anchor" href="#await-first-coroutine-end"><span><code>AWAIT_FIRST &lt;coroutine&gt; ... END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    AWAIT_FIRST
        CO_BEGIN
            DELAY <span class="token number">200</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;First coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
        
        CO_BEGIN
            DELAY <span class="token number">100</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Second coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
    END
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Race finished (second coroutine should finish first)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_FIRST</code>允许父程序暂时停止执行，直到定义的子程序中的一个完成。一旦任何一个子程序完成执行，父程序的执行将继续；其余未完成的子程序将立即被取消。只有在<code>AWAIT_FIRST...END</code>块中定义的程序才会被考虑到这种行为，任何先前创建的子程序将被忽略，以达到<code>AWAIT_FIRST</code>逻辑的目的。</p><p>每个子程序都存在于它自己的范围内，因此每个子程序内的变量对该程序来说是唯一的。父级和子级程序不共享变量，子级程序之间也不共享变量。所有角逐程序将执行<code>CO_ON_COMPLETE</code>函数，无论该角逐程序是否是第一个结束的。</p><p><strong>请注意</strong>与普通的子程序不同，暂停或取消父程序将暂停或取消在<code>AWAIT_FIRST...END</code>块内创建的子程序。</p><p><strong>请注意</strong>当一个协程在<code>AWAIT_FIRST</code>命令下等待时，<code>.GetPaused()</code>方法<strong>不会</strong>返回<code>true</code>。</p><h4 id="await-all-coroutine-end" tabindex="-1"><a class="header-anchor" href="#await-all-coroutine-end"><span><code>AWAIT_ALL &lt;coroutine&gt; ... END</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    AWAIT_ALL
        CO_BEGIN
            DELAY <span class="token number">200</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;First coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
        
        CO_BEGIN
            DELAY <span class="token number">100</span> THEN
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Second coroutine finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CO_END
    END
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Sync finished (both coroutines should have finished)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_ALL</code>允许一个父程序暂时停止执行，直到所有定义的子程序完成。一旦所有的子程序完成了执行，父程序的执行将继续进行。只有在<code>AWAIT_ALL...END</code>块内定义的程序才会被考虑，任何先前创建的子程序将被忽略，以用于<code>AWAIT_ALL</code>逻辑。</p><p>每个子程序都存在于它自己的范围内，因此每个子程序中的变量对该程序来说是唯一的。父类和子类程序不共享变量，子类程序之间也不共享变量。</p><p><strong>请注意</strong>与普通的子程序不同，暂停或取消父程序将暂停或取消在<code>AWAIT_ALL...END</code>块中创建的子程序。</p><p><strong>请注意</strong>，当一个协程在<code>AWAIT_ALL</code>命令下等待时，<code>.GetPaused()</code>方法将不会**返回\`true&#39;。</p><h4 id="await-broadcast-name-then" tabindex="-1"><a class="header-anchor" href="#await-broadcast-name-then"><span><code>AWAIT_BROADCAST &lt;name&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token comment">//Rotate the door 30 degrees so it&#39;s ajar</span>
    WHILE <span class="token variable">image_angle</span> <span class="token operator">&lt;</span> <span class="token number">30</span> THEN
        <span class="token variable">image_angle</span> <span class="token operator">+=</span> <span class="token number">5</span>
        YIELD
    END
    
    <span class="token comment">//Wait for the player to push right...</span>
    AWAIT_BROADCAST <span class="token string">&quot;push right&quot;</span> THEN
    
    <span class="token comment">//...then open the door all the way!</span>
    WHILE <span class="token variable">image_angle</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> THEN
        <span class="token variable">image_angle</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token variable">image_angle</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        YIELD
    END
CO_END

<span class="token comment">///Elsewhere in the player object...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">keyboard_check</span><span class="token punctuation">(</span><span class="token constant">vk_right</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CoroutineBroadcast</span><span class="token punctuation">(</span><span class="token string">&quot;push right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">hspeed</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_BROADCAST</code>是一个有用的命令，它允许间接的，对 coroutine 的控制。当coroutine遇到<code>AWAIT_BROADCAST</code>命令时，coroutine将在该命令处暂停。为了使该程序继续执行，必须使用与<code>AWAIT_BROADCAST</code>命令相同的名称调用<code>CoroutineBroadcast()</code>。然后，当<code>CoroutineEventHook()</code>在一个Step事件中被调用时（通常是在下一帧），该程序将继续执行。如果多个程序在等待同名的广播，只需要调用一次<code>CoroutineBroadcast()</code>就可以恢复所有这些程序。</p><p><strong>请注意</strong>，当一个协程在等待<code>AWAIT_BROADCAST</code>命令时，<code>.GetPaused()</code>方法将<strong>不会</strong>返回<code>true</code>。</p><p><code>AWAIT_BROADCAST</code>默认情况下，只响应本地Coroutines广播。要收听来自精灵和序列的GameMaker广播，请使用<code>AWAIT_ASYNC_BROADCAST</code>。</p><h3 id="异步事件" tabindex="-1"><a class="header-anchor" href="#异步事件"><span>异步事件</span></a></h3><h4 id="await-async-function-then" tabindex="-1"><a class="header-anchor" href="#await-async-function-then"><span><code>AWAIT_ASYNC_* &lt;function&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Starting leaderboard pull&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">steam_download_scores</span><span class="token punctuation">(</span><span class="token string">&quot;Game Scores&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    AWAIT_ASYNC_STEAM
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard request timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
           <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard data received&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">global</span><span class="token punctuation">.</span>scores <span class="token operator">=</span> <span class="token function">array_resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">var</span> _list <span class="token operator">=</span> map<span class="token punctuation">[</span>? <span class="token string">&quot;entries&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">repeat</span><span class="token punctuation">(</span><span class="token function">ds_list_size</span><span class="token punctuation">(</span>_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> _data <span class="token operator">=</span> _list<span class="token punctuation">[</span><span class="token operator">|</span> _i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token constant">global</span><span class="token punctuation">.</span>scores<span class="token punctuation">,</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> _data<span class="token punctuation">[</span>? <span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">score</span> <span class="token punctuation">:</span> _data<span class="token punctuation">[</span>? <span class="token string">&quot;score&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rank <span class="token punctuation">:</span> _data<span class="token punctuation">[</span>? <span class="token string">&quot;rank&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                _i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
    THEN
    
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;Leaderboard pull complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AWAIT_ASYNC_*</code>命令（完整列表见下文）允许一个coroutine与GameMaker的本地异步事件系统进行交互。当coroutine遇到<code>AWAIT_ASYNC_*</code>命令时，coroutine将暂停该行代码并等待相关的异步事件被触发。一旦GameMaker的运行时出现正确类型的异步事件，<code>AWAIT_ASYNC_* ... THEN</code>的异步代码将被执行。如果该代码块调用了<code>ASYNC_COMPLETE</code>，那么coroutine立即执行进一步的代码，否则<code>AWAIT_ASYNC_*</code>继续监听新的事件。</p><p>位于<code>AWAIT_ASYNC_*</code>和<code>THEN</code>之间的标准GML函数在每次触发异步事件时都会被执行，而不管该异步事件是否与coroutine有关。这很不幸，但这也是GameMaker的设计方式。你应该总是检查你收到的<code>async_load</code>或<code>event_data</code> ds_map是否与你所期望的异步事件相匹配。</p><p><code>AWAIT_ASYNC_*</code>命令后面的代码不能包含任何coroutine宏（除了<code>ASYNC_COMPLETE</code>之外）。这是因为<code>async_load</code>和<code>event_data</code>可能包含易失性数据，在异步事件结束后不会持久。如果你想对异步事件返回的数据进行广泛的操作，你应该对其进行拷贝，然后在<code>AWAIT_ASYNC_*</code>代码块之外处理这些数据。</p><p><code>AWAIT_ASYNC_*</code>代码可以在一个操作超时时执行。默认情况下，没有设置超时时间，操作可能永远挂起。你可以使用<code>ASYNC_TIMEOUT</code>宏来定制超时时间（见下文）。当一个异步操作超时时，async_load是一个负数。你应该总是写代码来检查一个异步操作是否超时，也就是说，你应该总是处理<code>async_load</code>或<code>event_data</code>为负数的情况。</p><p>请注意，<code>AWAIT_ASYNC_BROADCAST</code>会专门接收GameMaker的精灵和序列广播；它不会接收Coroutines库中的广播（使用<code>AWAIT_BROADCAST</code>来代替）。此外，在<code>AWAIT_ASYNC_BROADCAST</code>代码块中，你应该检查<code>event_data</code>而不是<code>async_load</code>。</p><p>支持以下异步等待命令：</p><ul><li><code>AWAIT_ASYNC_HTTP</code></li><li><code>AWAIT_ASYNC_NETWORKING</code></li><li><code>AWAIT_ASYNC_SOCIAL</code></li><li><code>AWAIT_ASYNC_SAVE_LOAD</code></li><li><code>AWAIT_ASYNC_DIALOG</code></li><li><code>AWAIT_ASYNC_SYSTEM</code></li><li><code>AWAIT_ASYNC_STEAM</code></li><li><code>AWAIT_ASYNC_BROADCAST</code></li></ul>`,52),U={href:"https://github.com/JujuAdams/Coroutines/issues",target:"_blank",rel:"noopener noreferrer"},j=t(`<h4 id="async-complete" tabindex="-1"><a class="header-anchor" href="#async-complete"><span><code>ASYNC_COMPLETE</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    handle <span class="token operator">=</span> <span class="token function">get_string_async</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter your name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Juju Adams&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>    
    AWAIT_ASYNC_DIALOG
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;string&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
    THEN
    
    RETURN result<span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ASYNC_COMPLETE</code>是<code>AWAIT_ASYNC_*</code>命令的一个重要组成部分。它表示异步操作已经完成，并且coroutine应该可以继续执行代码。如果你不在你的异步代码块中调用<code>ASYNC_COMPLETE</code>，那么异步操作可能会无限期地挂起。</p><p><strong>请注意</strong>，<code>ASYNC_COMPLETE</code>不应该在<code>AWAIT_ASYNC_*</code>代码块之外调用，否则你会看到不可预测的行为。</p><h4 id="await-async-function-async-timeout-duration-then" tabindex="-1"><a class="header-anchor" href="#await-async-function-async-timeout-duration-then"><span><code>AWAIT_ASYNC_* &lt;function&gt; ASYNC_TIMEOUT &lt;duration&gt; THEN</code></span></a></h4><div class="language-gml line-numbers-mode" data-ext="gml" data-title="gml"><pre class="language-gml"><code>coroutineRootStruct <span class="token operator">=</span> CO_BEGIN
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">http_get</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.jujuadams.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AWAIT_ASYNC_HTTP
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//Handle the timeout case</span>
        <span class="token punctuation">{</span>
            <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ASYNC_COMPLETE
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> handle<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET succeeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;result&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ASYNC_COMPLETE
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;status&quot;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET failed with error code &quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token variable">async_load</span><span class="token punctuation">[</span>? <span class="token string">&quot;http_status&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ASYNC_COMPLETE
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    ASYNC_TIMEOUT <span class="token number">6000</span> THEN <span class="token comment">//Wait 6 seconds before timing out (6000 milliseconds)</span>
    <span class="token function">show_debug_message</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP GET complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CO_END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步操作，特别是对服务器的操作，经常会遇到问题，请求超时。<code>ASYNC_TIMEOUT...THEN</code>为<code>AWAIT_ASYNC_*</code>命令增加了一个超时行为，以处理可能出现未报告失败的情况。默认情况下，<code>AWAIT_ASYNC_*</code>命令没有超时时间，操作有可能会永远挂起。超时持续时间（<code>ASYNC_TIMEOUT</code>和<code>THEN</code>之间的数字）是以毫秒为单位的。</p><p>当异步代码被执行但操作超时时，<code>async_load</code>将被设置为一个负数。你应该总是在你的<code>AWAIT_ASYNC_*</code>块中写入行为，以处理<code>async_load</code>为负数的情况，避免出现意外问题。</p>`,8);function J(K,V){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,d,r,k,n("p",null,[v,s("："),n("a",m,[s("Github"),e(a)])]),b,g,n("p",null,[s("理论上支持除了HTML5之外的一切。到目前为止，我只在Windows上进行了测试。整个扩展都是原生GML编写的，所以它应该可以开箱即用。您可能会在某个不经常测试的平台上遇到特殊的错误。如果你发现了他们，请"),n("a",h,[s("报告"),e(a)]),s("给我们。")]),_,n("p",null,[s("该库在"),n("a",E,[s("MIT许可"),e(a)]),s("下发布。这意味着您可以将其用于任何您想要的目的，包括商业项目。你可以把我的名字放在你的感谢列表（Juju Adams）并且说谢谢，这对我来说意义重大，但你没有义务这样做。")]),A,n("p",null,[s("很好！请提出"),n("a",T,[s("Issues"),e(a)]),s("。Issues使协程的使用更有趣。而且这可以让我在公共交通上感到无聊时思考一些事情。")]),N,n("p",null,[s("请提出"),n("a",C,[s("Issues"),e(a)]),s("。Juju 每天都会检查 GitHub，错误修复通常会在几天后发布。你也可以去"),n("a",f,[s("Discord服务器"),e(a)]),s("上找我，但这并不能替代一个很好的清晰的错误报告。")]),O,I,n("h3",S,[n("a",R,[n("span",null,[s("协程是否适用于"),n("a",x,[s("GMLive"),e(a)]),s("？")])])]),L,q,D,H,n("p",null,[s("这个库是由"),n("a",y,[s("@jujuadams"),e(a)]),s("经过长时间修补GameMaker而建立和维护的。Juju参与了很多"),n("a",G,[s("商业GameMaker游戏"),e(a)]),s("。")]),w,n("ol",null,[n("li",null,[n("a",M,[s("提交一个错误报告!"),e(a)]),s(" 这个问题很可能是可以解决的!")]),Y]),P,n("p",null,[s("当在数组上迭代时，迭代器变量是由数组本身给出的值。当迭代结构时，迭代器变量从结构中获得数值；要迭代结构的键，请使用"),n("a",W,[B,e(a)]),s("。")]),F,n("p",null,[s("这些是GameMaker中最常见的异步事件。如果你想添加更多的异步事件，那么请"),n("a",U,[s("让我知道"),e(a)]),s("，它们将被纳入正式发布。")]),j])}const X=o(l,[["render",J],["__file","Coroutines.html.vue"]]),Q=JSON.parse('{"path":"/blogs/2024/5/Coroutines.html","title":"【插件】协程","lang":"en-US","frontmatter":{"title":"【插件】协程","date":"2021/12/5","categories":["插件教程"]},"headers":[{"level":2,"title":"常见问题解答","slug":"常见问题解答","link":"#常见问题解答","children":[{"level":3,"title":"协程可以在哪些平台上运行？","slug":"协程可以在哪些平台上运行","link":"#协程可以在哪些平台上运行","children":[]},{"level":3,"title":"此代码库的许可证是什么？我可以将其用于商业项目吗？","slug":"此代码库的许可证是什么-我可以将其用于商业项目吗","link":"#此代码库的许可证是什么-我可以将其用于商业项目吗","children":[]},{"level":3,"title":"我认为您缺少一个有用的功能，我希望您实现它！","slug":"我认为您缺少一个有用的功能-我希望您实现它","link":"#我认为您缺少一个有用的功能-我希望您实现它","children":[]},{"level":3,"title":"我发现了一个错误，解决问题的最佳方法是什么？","slug":"我发现了一个错误-解决问题的最佳方法是什么","link":"#我发现了一个错误-解决问题的最佳方法是什么","children":[]},{"level":3,"title":"帮我！我收到有关异步事件的编译错误。","slug":"帮我-我收到有关异步事件的编译错误。","link":"#帮我-我收到有关异步事件的编译错误。","children":[]},{"level":3,"title":"协程是否适用于GMLive？","slug":"协程是否适用于gmlive","link":"#协程是否适用于gmlive","children":[]},{"level":3,"title":"说到GMLive，其作者还通过GMEdit实现了协程。这个库有什么不同？","slug":"说到gmlive-其作者还通过gmedit实现了协程。这个库有什么不同","link":"#说到gmlive-其作者还通过gmedit实现了协程。这个库有什么不同","children":[]},{"level":3,"title":"谁写的代码？","slug":"谁写的代码","link":"#谁写的代码","children":[]},{"level":3,"title":"我可以给你捐款吗？","slug":"我可以给你捐款吗","link":"#我可以给你捐款吗","children":[]}]},{"level":2,"title":"协程简介","slug":"协程简介","link":"#协程简介","children":[{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]}]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[{"level":3,"title":"COROUTINES_CHECK_SYNTAX","slug":"coroutines-check-syntax","link":"#coroutines-check-syntax","children":[]},{"level":3,"title":"COROUTINES_DELAY_REALTIME","slug":"coroutines-delay-realtime","link":"#coroutines-delay-realtime","children":[]},{"level":3,"title":"COROUTINES_DEFAULT_CANCEL_WHEN_ORPHANED","slug":"coroutines-default-cancel-when-orphaned","link":"#coroutines-default-cancel-when-orphaned","children":[]},{"level":3,"title":"COROUTINES_DEFAULT_CREATOR_WEAK_REFERENCE","slug":"coroutines-default-creator-weak-reference","link":"#coroutines-default-creator-weak-reference","children":[]},{"level":3,"title":"COROUTINES_GAMEMAKER_BROADCASTS_TRIGGER_NATIVE","slug":"coroutines-gamemaker-broadcasts-trigger-native","link":"#coroutines-gamemaker-broadcasts-trigger-native","children":[]}]},{"level":2,"title":"协程语法","slug":"协程语法","link":"#协程语法","children":[{"level":3,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":3,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"循环","slug":"循环","link":"#循环","children":[]},{"level":3,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"异步事件","slug":"异步事件","link":"#异步事件","children":[]}]}],"git":{"createdTime":1716905433000,"updatedTime":1716905433000,"contributors":[{"name":"Feafly","email":"jjcyf@foxmail.com","commits":1}]},"filePathRelative":"blogs/2024/5/Coroutines.md"}');export{X as comp,Q as data};
